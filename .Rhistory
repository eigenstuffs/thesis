ungroup()
model <- feols(
data = shuffled_data,
fml = EE_Score ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
permutation_coefficients$EIScore[i] <- coef(model)["Ideology"]
}
permutation_coefficients$Emissions_Bool <- ifelse(
permutation_coefficients$Emissions >= coef_emissions,
TRUE, FALSE
)
permutation_coefficients$CarbonIntensity_Bool <- ifelse(
permutation_coefficients$CarbonIntensity >= coef_carbon,
TRUE, FALSE
)
permutation_coefficients$EnergyIntensity_Bool <- ifelse(
permutation_coefficients$EnergyIntensity >= coef_energy,
TRUE, FALSE
)
permutation_coefficients$PolicyScore_Bool <- ifelse(
permutation_coefficients$PolicyScore >= coef_policies,
TRUE, FALSE
)
permutation_coefficients$CIScore_Bool <- ifelse(
permutation_coefficients$CIScore >= coef_carbon_policy,
TRUE, FALSE
)
permutation_coefficients$EIScore_Bool <- ifelse(
permutation_coefficients$EIScore >= coef_energy_policy,
TRUE, FALSE
)
emissions_p <- mean(abs(permutation_coefficients$Emissions) >= abs(coef_emissions))
carbon_p <- mean(abs(permutation_coefficients$CarbonIntensity) >= abs(coef_carbon))
energy_p <- mean(abs(permutation_coefficients$EnergyIntensity) >= abs(coef_energy))
score_p <- mean(abs(permutation_coefficients$PolicyScore) >= abs(coef_policies))
carbon_score_p <- mean(abs(permutation_coefficients$CIScore) >= abs(coef_carbon_policy))
energy_score_p <- mean(abs(permutation_coefficients$EIScore) >= abs(coef_energy_policy))
hist0 <- gghistogram(permutation_coefficients, x = "Emissions", fill = "Emissions_Bool", color = "NA", bins = 20) +  geom_vline(aes(xintercept = coef_emissions), linetype = "dashed") + labs(title = "Per Capita Emissions", x = "", y = "", subtitle = paste("p =", emissions_p), 'fill' = "Above baseline?") + theme_replace(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + scale_x_continuous(breaks = seq(from = -.04, to = .04, by = .02))
hist1 <- gghistogram(permutation_coefficients, x = "CarbonIntensity", fill = "CarbonIntensity_Bool", color = "NA", bins = 20) +  geom_vline(aes(xintercept = coef_carbon), linetype = "dashed") + labs(title = "Carbon Intensity", x = "", y = "", subtitle = paste("p =", carbon_p), 'fill' = "Above baseline?") + theme_replace(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + scale_x_continuous(breaks = seq(from = -.02, to = .02, by = .02))
hist2 <- gghistogram(permutation_coefficients, x = "EnergyIntensity", fill = "EnergyIntensity_Bool", color = "NA", bins = 20) + geom_vline(aes(xintercept = coef_energy), linetype = "dashed") + labs(title = "Energy Intensity", x = "", y = "", subtitle = paste("p =", energy_p), 'fill' = "Above baseline?") + theme_replace(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + scale_x_continuous(breaks = seq(from = -.02, to = .02, by = .02))
hist3 <- gghistogram(permutation_coefficients, x = "PolicyScore", fill = "PolicyScore_Bool", color = "NA", bins = 20) + geom_vline(aes(xintercept = coef_policies), linetype = "dashed") + labs(title = "Climate Policy", x = "", y = "", subtitle = paste("p =", score_p), 'fill' = "Above baseline?") + theme_replace(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + scale_x_continuous(breaks = seq(from = -4, to = 1, by = 1))
hist4 <- gghistogram(permutation_coefficients, x = "CIScore", fill = "CIScore_Bool", color = "NA", bins = 20, label.y = F) + geom_vline(aes(xintercept = coef_carbon_policy), linetype = "dashed") + labs(title = "Carbon Policy", x = "", y = "", subtitle = paste("p =", carbon_score_p), 'fill' = "Above baseline?") + theme_replace(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + scale_x_continuous(breaks = seq(from = -2.4, to = 1, by = .6))
hist5 <- gghistogram(permutation_coefficients, x = "EIScore", fill = "EIScore_Bool", color = "NA", bins = 20) + geom_vline(aes(xintercept = coef_energy_policy), linetype = "dashed") + labs(title = "Energy Policy", x = "", y = "", subtitle = paste("p =", energy_score_p), 'fill' = "Above baseline?") + theme_replace(axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + scale_x_continuous(breaks = seq(from = -1.2, to = 1.2, by = 0.6))
multi.page <- ggarrange(ggarrange(hist0, legend = TRUE, ncol = 1),
ggarrange(hist1, hist2, legend = FALSE, ncol = 2), nrow = 2, common.legend = TRUE)
multi.page.2 <- ggarrange(ggarrange(hist3, legend = TRUE, ncol = 1),
ggarrange(hist4, hist5, legend = FALSE, ncol = 2), nrow = 2, common.legend = TRUE)
ggexport(multi.page, filename = "multi.page.pdf")
ggexport(multi.page.2, filename = "multi.page.2.pdf")
summary(m3)
summary(m4)
etable(m1, m1_no_outliers, m2, m2_no_outliers, tex = TRUE, headers = c("w/ Influential", "w/o Influential", "w/ Influential", "w/o Influential"))
etable(m3, m3_no_outliers, m4, m4_no_outliers, tex = TRUE, headers = c("w/ Influential", "w/o Influential", "w/ Influential", "w/o Influential"))
etable(m1, m1_no_outliers, vcov = "iid", tex = TRUE)
etable(m2, m2_no_outliers, vcov = "iid", tex = TRUE)
etable(m3, m3_no_outliers, vcov = "iid", tex = TRUE)
etable(m4, m4_no_outliers, vcov = "iid", tex = TRUE)
bptest(lm(log(EmissionsPerCapita) ~ Ideology + log(Population) + log(GDPPerCapita) + factor(State) + factor(Year), data = panel))
bptest(lm(log(CarbonIntensity) ~ Ideology + log(Population) + log(GDPPerCapita) + factor(State) + factor(Year), data = panel))
bptest(lm(log(EnergyIntensity) ~ Ideology + log(Population) + log(GDPPerCapita) + factor(State) + factor(Year), data = panel))
bptest(lm(Score ~ Ideology + factor(State) + factor(Year), data = panel))
bptest(lm(CI_Score ~ Ideology + factor(State) + factor(Year), data = panel))
bptest(lm(EE_Score ~ Ideology + factor(State) + factor(Year), data = panel))
wald_tests <- data.frame(rbind(wald(m1, print = FALSE, keep = "Ideology"),
wald(m1_no_outliers, print = FALSE, keep = "Ideology"),
wald(m2, print = FALSE, keep = "Ideology"),
wald(m2_no_outliers, print = FALSE, keep = "Ideology"),
wald(m3, keep = "Ideology", print = FALSE),
wald(m4, keep = "Ideology", print = FALSE),
wald(m3_no_outliers, keep = "Ideology", print = FALSE),
wald(m4_no_outliers, keep = "Ideology", print = FALSE)))
wald_tests <- data.frame(lapply(wald_tests, function(x) sapply(x, function(y) unlist(y)[1])))
walds <- c("FE log(CarbonIntensity)", "no outliers", "FE log(EnergyIntensity)", "no outliers", "MLR log(CarbonIntensity)", "no outliers",
"MLR log(EnergyIntensity)", "no outliers")
wald_tests <- cbind(walds, wald_tests)
view(wald_tests)
xtable(wald_tests, label = NULL)
wald_tests_iid <- data.frame(rbind(wald(m1, print = FALSE, vcov = "iid"),
wald(m1_no_outliers, print = FALSE, vcov = "iid"),
wald(m2, print = FALSE, vcov = "iid"),
wald(m2_no_outliers, print = FALSE, vcov = "iid"),
wald(m3, keep = "Ideology", print = FALSE, vcov = "iid"),
wald(m4, keep = "Ideology", print = FALSE, vcov = "iid"),
wald(m3_no_outliers, keep = "Ideology", print = FALSE, vcov = "iid"),
wald(m4_no_outliers, keep = "Ideology", print = FALSE, vcov = "iid")))
wald_tests_iid <- data.frame(lapply(wald_tests_iid, function(x) sapply(x, function(y) unlist(y)[1])))
wald_tests_iid <- cbind(walds, wald_tests_iid)
xtable(wald_tests_iid, label = NULL)
view(wald_tests_iid)
plot_data <- panel %>% group_by(Year) %>%
summarise(AvgIdeology = mean(Ideology, na.rm = TRUE),
AvgEmissionsPerCapita = mean(EmissionsPerCapita, na.rm = TRUE),
AvgBindingRPS = mean(x_rps_targets_bindingonly, na.rm = TRUE),
AvgGasolineTax = mean(z_gasoline_tax, na.rm = TRUE),
AvgEfficiencyProcurement = mean(x_eers, na.rm = TRUE),
AvgPolicy = mean(Score, na.rm = TRUE),
AvgCarbonScore = mean(CI_Score, na.rm = TRUE),
AvgEnergyScore = mean(EE_Score, na.rm = TRUE),
AvgCarbonIntensity = mean(CarbonIntensity, na.rm = TRUE),
AvgEnergyIntensity = mean(EnergyIntensity, na.rm = TRUE),
AvgGDPPerCapita = mean(GDPPerCapita, na.rm = TRUE)
)
ggplot(plot_data) + geom_line(aes(x = Year, y = AvgIdeology)) + labs(title = "Average State Legislature Ideology 1998-2020", x = "Year", y = "Ideology (left-right)") + theme_pubr()
ggsave("ideology_over_time.png")
ggplot(plot_data) + geom_line(aes(x = Year, y = AvgCarbonIntensity)) + labs(title = "Average Carbon Intensity 1998-2020", x = "Year") + theme_pubr()
ggplot(plot_data) + geom_line(aes(x = Year, y = AvgEnergyIntensity)) + labs(title = "Average Energy Intensity 1998-2020", x = "Year") + theme_pubr()
ggplot(plot_data) + geom_line(aes(x = Year, y = AvgEmissionsPerCapita)) + labs(title = "Average Per Capita Emissions 1998-2020", x = "Year") + theme_pubr()
ggplot(plot_data) + geom_line(aes(x = Year, y = AvgPolicy)) + labs(title = "Average Policy Score 1998-2020", x = "Year") + theme_pubr()
ggplot(plot_data) + geom_line(aes(x = Year, y = AvgCarbonScore)) + labs(title = "Average Carbon Policy Score 1998-2020", x = "Year") + theme_pubr()
ggplot(plot_data) + geom_line(aes(x = Year, y = AvgEnergyScore)) + labs(title = "Average Energy Policy Score 1998-2020", x = "Year") + theme_pubr()
ggplot(plot_data) + geom_line(aes(x = AvgGDPPerCapita, y = AvgCarbonIntensity)) + labs(title = "GDP Per Capita vs. Carbon Intensity") + theme_pubr()
ggplot(plot_data) + geom_line(aes(x = AvgGDPPerCapita, y = AvgEnergyIntensity)) + labs(title = "GDP Per Capita vs. Energy Intensity") + theme_pubr()
ggplot(panel) + geom_point(aes(x = Ideology, y = CI_Score))+ geom_smooth(aes(x = Ideology, y = CI_Score), method = "lm") + labs(title = "Ideology vs. Carbon Score 1998-2020") + theme_pubr()
ggplot(panel) + geom_point(aes(x = Ideology, y = EE_Score)) + geom_smooth(aes(x = Ideology, y = EE_Score), method = "lm") + labs(title = "Ideology vs. Energy Score 1998-2020") + theme_pubr()
ggplot(panel) + geom_point(aes(x = Ideology, y = CarbonIntensity))+ geom_smooth(aes(x = Ideology, y = CarbonIntensity), method = "lm") + labs(title = "Ideology vs. Carbon Intensity 1998-2020") + theme_pubr()
ggplot(panel) + geom_point(aes(x = Ideology, y = EnergyIntensity)) + geom_smooth(aes(x = Ideology, y = EnergyIntensity), method = "lm") + labs(title = "Ideology vs. Energy Intensity 1998-2020") + theme_pubr()
ggplot(panel) + geom_point(aes(x = CI_Score, y = CarbonIntensity)) + labs(title = "CI Score vs. Carbon Intensity 1998-2020") + theme_pubr()
ggplot(panel) + geom_point(aes(x = EE_Score, y = EnergyIntensity)) + labs(title = "EI Score vs. Energy Intensity 1998-2020") + theme_pubr()
fixed_m1 <- fixef(m1)
fixed_m1_no_outliers <- fixef(m1_no_outliers)
fixed_m2 <- fixef(m2)
fixed_m2_no_outliers <- fixef(m2_no_outliers)
plot(fixed_m1)
plot(fixed_m1_no_outliers)
plot(fixed_m2)
plot(fixed_m2_no_outliers)
fixed_policy <- fixef(baseline_policies)
fixed_policy_c <- fixef(baseline_carbon_policy)
fixed_policy_e <- fixef(baseline_energy_policy)
plot(fixed_policy)
plot(fixed_policy_c)
plot(fixed_policy_e)
m5 <- feols(
data = panel,
fml = Score ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
m6 <- feols(
data = panel,
fml = CI_Score ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
m7 <- feols(
data = panel,
fml = EE_Score ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
residuals_m5 <- resid(m5)
residual_threshold_m5 <- mean(residuals_m5) + 2*sd(residuals_m5)
observations_to_exclude_m5 <- which(abs(residuals_m5) > residual_threshold_m5)
data_reduced_m5 <- panel[-observations_to_exclude_m5, ]
residuals_m6 <- resid(m6)
residual_threshold_m6 <- mean(residuals_m6) + 2*sd(residuals_m6)
observations_to_exclude_m6 <- which(abs(residuals_m6) > residual_threshold_m6)
data_reduced_m6 <- panel[-observations_to_exclude_m6, ]
residuals_m7 <- resid(m7)
residual_threshold_m7 <- mean(residuals_m7) + 2*sd(residuals_m7)
observations_to_exclude_m7 <- which(abs(residuals_m7) > residual_threshold_m7)
data_reduced_m7 <- panel[-observations_to_exclude_m7, ]
m5_no_outliers <- feols(
data = data_reduced_m5,
fml = Score ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
m6_no_outliers <- feols(
data = data_reduced_m6,
fml = CI_Score ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
m7_no_outliers <- feols(
data = data_reduced_m7,
fml = EE_Score ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
m5
m6
m7
m5_no_outliers
m6_no_outliers
m7_no_outliers
etable(m5, m5_no_outliers, tex = TRUE, headers = c("w/ Influential", "w/o Influential"))
etable(m6, m6_no_outliers, m7, m7_no_outliers, tex = TRUE, headers = c("w/ Influential", "w/o Influential", "w/ Influential", "w/o Influential"))
fixed_m1 <- fixef(m1)
fixed_m1_no_outliers <- fixef(m1_no_outliers)
fixed_m2 <- fixef(m2)
fixed_m2_no_outliers <- fixef(m2_no_outliers)
plot(fixed_m1)
plot(fixed_m1_no_outliers)
plot(fixed_m2)
plot(fixed_m2_no_outliers)
fixed_policy_m5 <- fixef(m5)
fixed_m5_no_outliers <- fixef(m5_no_outliers)
fixed_policy_m6 <- fixef(m6)
fixed_m6_no_outliers <- fixef(m6_no_outliers)
fixed_policy_m7 <- fixef(m7)
fixed_m7_no_outliers <- fixef(m7_no_outliers)
plot(fixed_policy_m5)
plot(fixed_m5_no_outliers)
plot(fixed_policy_m6)
plot(fixed_m6_no_outliers)
plot(fixed_policy_m7)
plot(fixed_m7_no_outliers)
fixed_m1 <- fixef(m1)
fixed_m1_no_outliers <- fixef(m1_no_outliers)
fixed_m2 <- fixef(m2)
fixed_m2_no_outliers <- fixef(m2_no_outliers)
plot(fixed_m1)
#plot(fixed_m1_no_outliers)
plot(fixed_m2)
#plot(fixed_m2_no_outliers)
fixed_policy_m5 <- fixef(m5)
fixed_m5_no_outliers <- fixef(m5_no_outliers)
fixed_policy_m6 <- fixef(m6)
fixed_m6_no_outliers <- fixef(m6_no_outliers)
fixed_policy_m7 <- fixef(m7)
fixed_m7_no_outliers <- fixef(m7_no_outliers)
plot(fixed_policy_m5)
#plot(fixed_m5_no_outliers)
plot(fixed_policy_m6)
#plot(fixed_m6_no_outliers)
plot(fixed_policy_m7)
#plot(fixed_m7_no_outliers)
par(mfrow=c(1, 5))
plot(fixed_m1) # 'l' for line plot
pplot(fixed_m2)
lot(fixed_m1) # 'l' for line plot
par(mfrow=c(1, 5))
plot(fixed_m1) # 'l' for line plot
plot(fixed_m2)
plot(fixed_m5)
fixed_m1 <- fixef(m1)
fixed_m1_no_outliers <- fixef(m1_no_outliers)
fixed_m2 <- fixef(m2)
fixed_m2_no_outliers <- fixef(m2_no_outliers)
plot(fixed_m1)
#plot(fixed_m1_no_outliers)
plot(fixed_m2)
#plot(fixed_m2_no_outliers)
fixed_m5 <- fixef(m5)
fixed_m5_no_outliers <- fixef(m5_no_outliers)
fixed_m6 <- fixef(m6)
fixed_m6_no_outliers <- fixef(m6_no_outliers)
fixed_m7 <- fixef(m7)
fixed_m7_no_outliers <- fixef(m7_no_outliers)
plot(fixed_policy_m5)
#plot(fixed_m5_no_outliers)
plot(fixed_policy_m6)
#plot(fixed_m6_no_outliers)
plot(fixed_policy_m7)
#plot(fixed_m7_no_outliers)
par(mfrow=c(1, 5))
plot(fixed_m1) # 'l' for line plot
plot(fixed_m2)
plot(fixed_m5)
plot(fixed_m6)
plot(fixed_m7)
par(mfrow=c(1, 5))
plot(fixed_m1) # 'l' for line plot
plot(fixed_m2)
plot(fixed_m5)
plot(fixed_m6)
plot(fixed_m7)
hist(fixef(m1))
barplot(fixef(m1))
fixed_m1 <- fixef(m1)
fixed_m1_no_outliers <- fixef(m1_no_outliers)
fixed_m2 <- fixef(m2)
fixed_m2_no_outliers <- fixef(m2_no_outliers)
fixed_m5 <- fixef(m5)
fixed_m5_no_outliers <- fixef(m5_no_outliers)
fixed_m6 <- fixef(m6)
fixed_m6_no_outliers <- fixef(m6_no_outliers)
fixed_m7 <- fixef(m7)
fixed_m7_no_outliers <- fixef(m7_no_outliers)
plot(fixed_m1)
plot(fixed_m2)
plot(fixed_m5)
plot(fixed_m6)
plot(fixed_m7)
png("fixed_m1.png")
plot(fixed_m1)
dev.off()
png("fixed_m2.png")
plot(fixed_m2)
dev.off()
png("fixed_m5.png")
plot(fixed_m5)
dev.off()
png("fixed_m6.png")
plot(fixed_m6)
dev.off()
png("fixed_m7.png")
plot(fixed_m7)
dev.off()
plot(fixed_m5, fixed_m6)
plot(fixed_m1)
plot(fixed_m2)
plot(fixed_m5)
plot(fixed_m6)
plot(fixed_m7)
plot(fixed_m1)
plot(fixed_m2)
plot(fixed_m5)
plot(fixed_m6)
plot(fixed_m7)
library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
library(tidyverse)
library(igraph)
library(ggraph)
# 1.
df <- read.csv("ML_merged.csv")
# 2.
df$userId <- gsub(" ", "", df$userId)
df$title_long <- paste0("title_", df$title)
# 3. Keep a random set of 250 users
set.seed(123)
users_keep <- unique(df$userId)  # Taking unique so I do not oversample active users
users_keep <- users_keep[sample(1:length(users_keep), 250)] # Keeps 250 users
df$userId <- as.factor(df$userId)  # Ensure userId is a factor for subsetting
ml <- df[df$userId %in% users_keep, ]
# 4. Keep a random set of 150 movies
set.seed(123)
movies_keep <- unique(df$title_long)  # Taking unique means will not oversample popular ones
movies_keep <- movies_keep[sample(1:length(movies_keep), 150)]  # Keeps 150 movies
df$title_long <- as.factor(df$title_long)  # Ensure title_long is a factor for subsetting
ml2 <- ml[ml$title_long %in% movies_keep, ]
# 5a.
ml20 <- ml2[ml2$title_long %in% names(which(table(ml2$title_long) > 20)), ]
# 5b.
num_movies_ml20 <- length(unique(ml20$title_long))
num_users_ml20 <- length(unique(ml20$userId))
# 5c.
num_movies_full <- length(unique(df$title_long))
num_users_full <- length(unique(df$userId))
movies_diff <- num_movies_full - num_movies_ml20
users_diff <- num_users_full - num_users_ml20
list(
Movies_in_ml20 = num_movies_ml20,
Users_in_ml20 = num_users_ml20,
Movies_diff_full = movies_diff,
Users_diff_full = users_diff
)
# 1.
ml_b <- graph_from_data_frame(ml[, c("userId", "title_long")], directed = FALSE)
V(ml_b)$type <- V(ml_b)$name %in% unique(ml$userId)
# 1a.
is_bipartite(ml_b)
# 1b.
true_count <- sum(V(ml_b)$type)
user_count <- length(unique(ml$userId))
true_count == user_count
# 2.
ml_20b <- graph_from_data_frame(ml20[, c("userId", "title_long")], directed = FALSE)
V(ml_20b)$type <- !V(ml_20b)$name %in% unique(ml20$userId)
# 2a.
vertex_attr(ml_20b)
# 3.
proj_data <- bipartite.projection(ml_b)
uu_b <- proj_data$proj1
# 4.
proj_20_data <- bipartite.projection(ml_20b)
mm_20b <- proj_20_data$proj2
simplified_uu_b <- igraph::simplify(uu_b, remove.multiple = TRUE, remove.loops = TRUE)
sampled_edges <- sample_edges(simplified_uu_b, size = ecount(simplified_uu_b) * 0.5)
l
simplified_uu_b <- igraph::simplify(uu_b, remove.multiple = TRUE, remove.loops = TRUE)
all_edges <- E(simplified_uu_b)
sampled_edge_ids <- sample(seq_len(length(all_edges)), size = length(all_edges) * 0.5)
edges_to_keep <- all_edges[sampled_edge_ids]
sampled_uu_b_by_edges <- induced_subgraph(simplified_uu_b, vids = vertices_connected_by_edges)
vertices_connected_by_edges <- unique(c(edges_to_keep$from, edges_to_keep$to))
sampled_uu_b_by_edges <- induced_subgraph(simplified_uu_b, vids = vertices_connected_by_edges)
# 1.
ggraph(sampled_uu_b_by_edges, layout = "kk") +
geom_edge_link(alpha = 0.1) +
geom_node_point() +
theme_void() +
theme(legend.position = "none")
View(simplified_uu_b)
View(sampled_uu_b_by_edges)
sampled_edge_indices <- sample(1:ecount(simplified_uu_b), size = floor(ecount(simplified_uu_b) * 0.5))
# Retrieve the actual edges as a list of vertex pairs
sampled_edges <- get.edgelist(simplified_uu_b)[sampled_edge_indices, ]
# 1.
ggraph(sampled_graph, layout = "kk") +
geom_edge_link(alpha = 0.1) +
geom_node_point() +
theme_void() +
theme(legend.position = "none")
library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
library(tidyverse)
library(igraph)
library(ggraph)
# 1.
df <- read.csv("ML_merged.csv")
# 2.
df$userId <- gsub(" ", "", df$userId)
df$title_long <- paste0("title_", df$title)
# 3. Keep a random set of 250 users
set.seed(123)
users_keep <- unique(df$userId)  # Taking unique so I do not oversample active users
users_keep <- users_keep[sample(1:length(users_keep), 250)] # Keeps 250 users
df$userId <- as.factor(df$userId)  # Ensure userId is a factor for subsetting
ml <- df[df$userId %in% users_keep, ]
# 4. Keep a random set of 150 movies
set.seed(123)
movies_keep <- unique(df$title_long)  # Taking unique means will not oversample popular ones
movies_keep <- movies_keep[sample(1:length(movies_keep), 150)]  # Keeps 150 movies
df$title_long <- as.factor(df$title_long)  # Ensure title_long is a factor for subsetting
ml2 <- ml[ml$title_long %in% movies_keep, ]
# 5a.
ml20 <- ml2[ml2$title_long %in% names(which(table(ml2$title_long) > 20)), ]
# 5b.
num_movies_ml20 <- length(unique(ml20$title_long))
num_users_ml20 <- length(unique(ml20$userId))
# 5c.
num_movies_full <- length(unique(df$title_long))
num_users_full <- length(unique(df$userId))
movies_diff <- num_movies_full - num_movies_ml20
users_diff <- num_users_full - num_users_ml20
list(
Movies_in_ml20 = num_movies_ml20,
Users_in_ml20 = num_users_ml20,
Movies_diff_full = movies_diff,
Users_diff_full = users_diff
)
# 1.
ml_b <- graph_from_data_frame(ml[, c("userId", "title_long")], directed = FALSE)
V(ml_b)$type <- V(ml_b)$name %in% unique(ml$userId)
# 1a.
is_bipartite(ml_b)
# 1b.
true_count <- sum(V(ml_b)$type)
user_count <- length(unique(ml$userId))
true_count == user_count
# 2.
ml_20b <- graph_from_data_frame(ml20[, c("userId", "title_long")], directed = FALSE)
V(ml_20b)$type <- !V(ml_20b)$name %in% unique(ml20$userId)
# 2a.
vertex_attr(ml_20b)
# 3.
proj_data <- bipartite.projection(ml_b)
uu_b <- proj_data$proj1
# 4.
proj_20_data <- bipartite.projection(ml_20b)
mm_20b <- proj_20_data$proj2
simplified_uu_b <- igraph::simplify(uu_b, remove.multiple = TRUE, remove.loops = TRUE)
sampled_edges <- get.edgelist(simplified_uu_b)[sampled_edge_indices, ]
simplified_uu_b <- igraph::simplify(uu_b, remove.multiple = TRUE, remove.loops = TRUE)
sampled_edge_indices <- sample(1:ecount(simplified_uu_b), size = floor(ecount(simplified_uu_b) * 0.5))
sampled_edges <- get.edgelist(simplified_uu_b)[sampled_edge_indices, ]
sampled_graph <- graph_from_edgelist(sampled_edges, directed = FALSE)
# 1.
ggraph(sampled_graph, layout = "kk") +
geom_edge_link(alpha = 0.1) +
geom_node_point() +
theme_void() +
theme(legend.position = "none")
setwd("~/Documents/R/thesis")
options(scipen=999)
library(tidyverse)
library(patchwork)
library(jtools)
library(stringr)
library(car)
library(ggpubr)
library(fixest)
library(lmtest)
library(xtable)
library(sandwich)
library(multiwayvcov)
set.seed(07151129)
theme_set(theme_pubr())
panel <- read.csv("panel_with_count_FEB20.csv")
permutation_coefficients <- data.frame(Emissions = rep(NA, 1000),
CarbonIntensity = rep(NA, 1000),
EnergyIntensity = rep(NA, 1000),
PolicyScore = rep(NA, 1000),
CIScore = rep(NA, 1000),
EIScore = rep(NA, 1000))
m1 <- feols(
data = panel,
fml = CarbonIntensity ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
m2 <- feols(
data = panel,
fml = EnergyIntensity ~ Ideology + log(Population) + log(GDPPerCapita) | State + Year,
panel.id = ~ State + Year,
vcov = "driscoll_kraay"
)
m1
m2
m1
m2
