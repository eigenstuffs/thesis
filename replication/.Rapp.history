library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind(as.numeric(as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind(as.numeric(as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind(as.numeric(as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
demographic.data$respondent<-as.numeric(demographic.data$respondent)#
demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}
tocRC
i,-22
i<-22
##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}
}
#########################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}
grab.demographics $cd
data$congress_district
data[1,]
##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}
}
data$congress_district
#########################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}
if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_2019"&input.source[i]!="Nationscape_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}
input.source[i]
######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind(as.numeric(as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind(as.numeric(as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind(as.numeric(as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
demographic.data$respondent<-as.numeric(demographic.data$respondent)#
demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]
tocRC
i<-22
data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind(as.numeric(as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind(as.numeric(as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind(as.numeric(as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))
}
##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))
grab2[1,]
grab.demographics[1,]
s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}
super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind(as.numeric(as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind(as.numeric(as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind(as.numeric(as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]
data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind(as.numeric(as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind(as.numeric(as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind(as.numeric(as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))}
+ 			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))
print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))
grab.demographics$self_ideology
data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind(as.numeric(as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind(as.numeric(as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind(as.numeric(as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))}
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind(as.numeric(as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind(as.numeric(as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind(as.numeric(as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))
demographics[demographics$source=="Nationscape_cumulative_2020",][q,]
demographics[demographics$source=="Nationscape_cumulative_2020",][1,]
demographic.data[demographic.data$source=="Nationscape_cumulative_2020",][1,]
demographic.data[demographic.data$source=="Nationscape_cumulative_2020" &!is.na(demographic.data$source),][1,]
demographic.data$respondent[demographic.data$source=="Nationscape_cumulative_2020" &!is.na(demographic.data$source)]
table(is.na(demographic.data$respondent))
table(demographic.data $sourceis.na(demographic.data$respondent))
table(demographic.data $source,is.na(demographic.data$respondent))
grab.demographics[1,]
ids
as.numeric(as.vector(data[,1])
)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
all.data[1,]
table(all.data$source, all.data$pid7)
table(data$pid7)
table(data$pid7_legacy)
data[1,]
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the NAES Data#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==2 & data$lean_independent==1]<-3#
		pid7[data$pid3==2 & data$lean_independent==2]<-4#
		pid7[data$pid3==2 & data$lean_independent==3]<-5#
		pid7[data$pid3==3 & data$strength_republican==2]<-2#
		pid7[data$pid3==3 & data$strength_republican==1]<-1#
		grab.demographics$pid7[is.na(grab.demographics$pid7)]<-pid7[is.na(grab.demographics$pid7)]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==2 & data$lean_independent==1]<-3#
		pid7[data$pid3==2 & data$lean_independent==2]<-4#
		pid7[data$pid3==2 & data$lean_independent==3]<-5#
		pid7[data$pid3==3 & data$strength_republican==2]<-2#
		pid7[data$pid3==3 & data$strength_republican==1]<-1#
		grab.demographics$pid7[is.na(grab.demographics$pid7)]<-pid7[is.na(grab.demographics$pid7)]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
table(all.data$pid7)
table(all.data$pid7, all.data$source)
dim(dat)
dim(data)
toc
i<-22
data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}
}
table(grab.demographics$pid7)
dtable()
table(data$pid7)
table(data$pid73)
table(data$pid3)
data[1,]
names(data)
dim(Data)
dim(data)
names(data)
data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}
}
names(data)
table(data$pid7)
table(data$pid3)
table(data$lean_independent)
table(data$strength_democrat)
if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==2 & data$lean_independent==1]<-3#
		pid7[data$pid3==2 & data$lean_independent==2]<-4#
		pid7[data$pid3==2 & data$lean_independent==3]<-5#
		pid7[data$pid3==3 & data$strength_republican==2]<-2#
		pid7[data$pid3==3 & data$strength_republican==1]<-1#
		grab.demographics$pid7[is.na(grab.demographics$pid7)]<-pid7[is.na(grab.demographics$pid7)]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==2 & data$lean_independent==1]<-3#
		pid7[data$pid3==2 & data$lean_independent==2]<-4#
		pid7[data$pid3==2 & data$lean_independent==3]<-5#
		pid7[data$pid3==3 & data$strength_republican==2]<-2#
		pid7[data$pid3==3 & data$strength_republican==1]<-1#
		grab.demographics$pid7[is.na(grab.demographics$pid7)]<-pid7[is.na(grab.demographics$pid7)]#
	}
table(grab.demographics$pid7)
grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]
table(grab.demographics$pid7)
table(data$strength_republican)
pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==2 & data$lean_independent==1]<-3#
		pid7[data$pid3==2 & data$lean_independent==2]<-4#
		pid7[data$pid3==2 & data$lean_independent==3]<-5#
		pid7[data$pid3==3 & data$strength_republican==2]<-6#
		pid7[data$pid3==3 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]
table(data$strength_republican)
table(grab.demographics$pid7)
table(grab.demographics$pid7, grab.demographics$pid34)
table(grab.demographics$pid7, grab.demographics$pid3)
table(grab.demographics$pid3)
table(grab.demographics$lean_independent, grab.demographics$pid3)
table(data$lean_independent, data$pid3)
table( data$pid3)
pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7
table(pid7)
table(pid7, data$pid3)
table(pid7, data$self_ideology)
table(pid7, data$ideo5)
table(grab.demographics$self_ideology)
table(grab.demographics$self_ideology, data$ideo5)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
prop.table(table(all.data$source, all.data$registered),1)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
prop.table(table(all.data$source, all.data$registered),1)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
221/435
library(foreign)#
library(tidyr)#
library(dplyr)#
library(haven)#
library(stringr)#
library(openxlsx)
getwd()
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
library(tidyverse)
group_by(all.data, source, pid3, !is.na(naes2004_estatetax))%>%summarise(issue=as.numeric(as.vector(naes2004_estatetax))
)
names(all.data)
all.data<-all.data[,-414]
all.data[1,]
group_by(all.data, source, pid3, !is.na(naes2004_estatetax))%>%summarise(issue=as.numeric(as.vector(naes2004_estatetax))
)
group_by(all.data, source, pid3, !is.na(naes2004_estatetax))%>%summarise(issue=mean(as.numeric(as.vector(naes2004_estatetax))))
group_by(all.data, source, pid3, !is.na(naes2004_estatetax))%>%summarise(issue=mean(as.numeric(as.vector(naes2004_estatetax, na.rm=T))))
group_by(all.data, source, pid3, !is.na(naes2004_estatetax))%>%summarise(issue=mean(as.numeric(as.vector(naes2004_estatetax), na.rm=T)))
group_by(all.data, source, pid3, !is.na(naes2004_estatetax))%>%summarise(issue=mean(as.numeric(as.vector(naes2004_estatetax)), na.rm=T))
group_by(filter(all.data, !is.na(naes2004_estatetax)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_estatetax)), na.rm=T))
group_by(filter(all.data, !is.na(naes2004_taxes)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_taxes)), na.rm=T))
group_by(filter(all.data, !is.na(naes2004_universalhealthcare)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_universalhealthcare)), na.rm=T))
group_by(filter(all.data, !is.na(cces2006_gaymarriageamendment)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(cces2006_gaymarriageamendment)), na.rm=T))
as.data.frame(group_by(filter(all.data, !is.na(cces2006_gaymarriageamendment)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(cces2006_gaymarriageamendment)), na.rm=T)))
as.data.frame(group_by(filter(all.data, !is.na(naes2004_stategaymarriage)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_stategaymarriage)), na.rm=T)))
as.data.frame(group_by(filter(all.data, !is.na(naes2004_guncontrol)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_guncontrol)), na.rm=T)))
as.data.frame(group_by(filter(all.data, !is.na(naes2004_assaultweapons)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_assaultweapons)), na.rm=T)))
as.data.frame(group_by(filter(all.data, !is.na(cces2006_stemcell2)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(cces2006_stemcell2)), na.rm=T)))
as.data.frame(group_by(filter(all.data, !is.na(naes2004_immigration)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_immigration)), na.rm=T)))
as.data.frame(group_by(filter(all.data, !is.na(naes2004_schoolvouchers)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_schoolvouchers)), na.rm=T)))
as.data.frame(group_by(filter(all.data, !is.na(naes2004_civilunion)), source, pid3)%>%summarise(issue=mean(as.numeric(as.vector(naes2004_civilunion)), na.rm=T)))
data<-read.csv("~/Dropbox/Projects/americanideologyproject/Updated 2022 Estimates/Model_Outputs/city_ideology_estimates_v2_20220804.csv")
data[1,]
summary(lm(presidential_demshare~ place_fips, data=data))
summary(lm(presidential_demshare~ mrp_ideology, data=data))
library(lfe)
library(felm)
summary(lm(presidential_demshare~ mrp_ideology+factor(place_fips), data=data))
table(data$period)
data<-filter(data, period!="2012_2021")
library(tidyverse)
summary(felm(presidential_demshare~ mrp_ideology+factor(place_fips), data=data))
library(lfe)
summary(felm(presidential_demshare~ mrp_ideology+factor(place_fips), data=data))
summary(felm(presidential_demshare~ mrp_ideology|place_fips, data=data))
data<-filter(data, period!="2012_2021")
table(data$period)
data<-filter(data, period!="2012_2021")
summary(felm(presidential_demshare~ mrp_ideology|place_fips, data=data))
summary(felm(presidential_demshare~ mrp_ideology|place_fips+period, data=data))
load('~/Dropbox/Projects/Local Politics - Dickson/Elections/Precinct_Returns/zipcode_returns_2012.RData')
ls()
zipcode_returns_2012
zip<-readRDS("~/Dropbox/Projects/americanideologyproject/Updated 2022 Estimates/Model_Outputs/2012_2016/mrp_results_zipcodes_2012_2016.RDS")
zip
zip[1,]
zip[zip=="20814"]
zip[zip=="20814",]
zip[zip=="2139",]
cities<-readRDS("~/Dropbox/Projects/americanideologyproject/Updated 2022 Estimates/Model_Outputs/2012_2016/mrp_results_cities_2012_2016.RDS")
cities[1,]
filter(cities, place_fips=="2511000")
library(tidyverse)
filter(cities, place_fips=="2511000")
filter(cities, place_fips=="2407125")
#### Cities#
#
mrp_data2<-filter(mrp_data, year>2011 & year<2017)#
cities_zip<-read.csv("Geographic Matching/cities_zip.csv")#
cities_zip<-group_by(cities_zip, zcta)%>%#
	arrange(desc(afact))%>%#
	dplyr::select(zcta, state, place,afact)#%>%#
	#slice(1)#
cities_zip<-rename(cities_zip, zip=zcta)#
cities_zip$zip<-as.numeric(as.vector(cities_zip$zip))#
cities_zip$place_fips<-paste0(cities_zip$state, cities_zip$place)#
cities_zip<-dplyr::select(cities_zip, zip, place_fips,afact)#
cities_zip$place_fips<-as.numeric(as.vector(cities_zip$place_fips))#
#
mrp_data2<-merge(mrp_data2, cities_zip, by="zip", all.x=T)#
mrp_data2$zip_weight<-runif(dim(mrp_data2)[1], 0,1)#
dim(mrp_data2)#
mrp_data2$afact<-as.numeric(as.vector(mrp_data2$afact))#
mrp_data2$afact[is.na(mrp_data2$afact)]<-1#
mrp_data2<-group_by(mrp_data2, source, respondent)%>%#
	slice_sample(n=1, weight_by=afact)#
dim(mrp_data2)#
#
cities_mrp<-readRDS("Model_Outputs/2012_2016/mrp_results_cities_2012_2016.RDS")#
#
means<-group_by(filter(mrp_data2), place_fips)%>%#
	summarise(#
	irt_ideology_unweighted_2012_16=mean(irt_estimate, na.rm=T),		#
		self_ideology_2022=mean(as.numeric(as.vector(self_ideology)), na.rm=T)	,#
		self_ideology_2022_se=sd(as.numeric(as.vector(self_ideology)), na.rm=T)/sqrt(n()),#
		irt_ideology_unweighted_2012_16_sd=sd(irt_estimate, na.rm=T),		#
		irt_ideology_unweighted_2012_16_se=sd(as.numeric(as.vector(irt_estimate)))/sqrt(n()),		#
		sample_size_2022=n()#
		)#
cities_mrp<-merge(cities_mrp, means, by.x="place_fips",by.y="place_fips", all.x=T, all.y=T)#
#pres_congressional_districts<-read.csv("Geographic covariates/Geographic_covariates_final/pres_congressional_districts.csv")#
pres<-read.csv("Presidential Vote/city_presidential_vote_2016.csv")#
place_covariates<-readRDS("Geographic covariates/Geographic_covariates_final/place_covariates.RDS")#
place_covariates<-filter(place_covariates, year==2020)#
place_covariates<-select(place_covariates, place_fips, population_2020)#
cities_mrp<-merge(cities_mrp, pres, by.x="place_fips",by.y="place_fips", all.x=T, all.y=T)#
cities_mrp<-merge(cities_mrp, place_covariates, by.x="place_fips",by.y="place_fips", all.x=T, all.y=T)#
summary(lm(demshare_pres_2016~ mrp_ideology_2012_2016, data=cities_mrp))#
summary(lm(demshare_pres_2016~ irt_ideology_unweighted_2012_16, data=cities_mrp))
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
prop.table(table(all.data$source, all.data$president_vote),1)
prop.table(table(all.data$source, all.data$president_post_vote),1)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
prop.table(table(all.data$source, all.data$president_vote),1)
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
prop.table(table(all.data$source, all.data$president_vote),1)
prop.table(table(all.data$source, all.data$president_post_vote),1)
prop.table(table( all.data$president_post_vote[all.data$source=="Nationscape_cumulative_2020"]))
library(pscl)#
library(car)#
library(pscl)#
library(foreign)#
library(Hmisc)#
library(survey)#
#
loc.selectdata <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/selectdata/"#
loc.inputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
loc.graphs <- "/Users/cwarshaw/Dropbox/Representation/IRT Graphs/"#
loc.outputs <- "/Users/cwarshaw/Dropbox/Representation/IRT Data Files/"#
#
############################################
## Import matrices that define the questions and transformations we'll use								 ###
############################################
#
## Input the matrices that select questions and transform responses#
questions<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
transformations<-read.csv(paste(loc.selectdata,"transformations.csv",sep=""), colClasses="character")#
merge_file<-read.csv(paste(loc.selectdata,"questions_short_updated.csv",sep=""))#
#
#questions[,1]<-as.vector(questions[,1])#
#questions[,1]<-gsub(" ", "",questions[,1])#
#transformations[,1]<-as.vector(transformations[,1])#
#transformations[,1]<-gsub(" ", "",transformations[,1])#
#
ssd.fips<-read.csv(paste(loc.inputs,"ssd_fips.csv",sep=""),na.strings = ".")#
questions.demographics<-read.csv(paste(loc.selectdata,"questions_demographics.csv",sep=""))#
questions.demographics[,1]<-as.vector(questions.demographics[,1])#
questions.demographics[,1]<-gsub(" ", "",questions.demographics[,1])#
#
demographics.transformations<-read.csv(paste(loc.selectdata,"transformations_demographics.csv",sep=""),colClasses="character")#
demographics.transformations[,1]<-as.vector(demographics.transformations[,1])#
demographics.transformations[,1]<-gsub(" ", "",demographics.transformations[,1])#
questions.information<-read.csv(paste(loc.selectdata,"questions_information.csv",sep=""))#
information.transformations<-read.csv(paste(loc.selectdata,"transformations_information.csv",sep=""),colClasses="character")#
unique.variables<-unique(merge_file[,2])#
header.new<-t(unique.variables)#
header.new2<-header.new[1,]#
#
demographic.unique.variables<-unique(questions.demographics[,3])#
demographic.unique.variables<-gsub(" ", "",demographic.unique.variables)#
demographic.unique.variables<-demographic.unique.variables[demographic.unique.variables!=""]#
#
demographic.header.new<-t(demographic.unique.variables)#
demographic.header.new2<-demographic.header.new[1,]#
#
information.unique.variables<-unique(questions.information[,3])#
information.header.new<-t(information.unique.variables)#
information.header.new2<-information.header.new[1,]#
#
sample.percentage<-.015#
#
column<-NA#
#
## Define the large matrix where we'll put all the transformed data.#
all.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
demographic.data<-matrix(NA, nrow=1, ncol=(2+length(demographic.unique.variables)))#
information.data<-matrix(NA, nrow=1, ncol=(2+length(information.unique.variables)))#
rc.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
rc.data.small<-matrix(NA, nrow=1, ncol=24)#
small.data<-matrix(NA, nrow=1, ncol=(2+length(unique.variables)))#
header.temp<-matrix(NA, nrow=1, ncol=(length(unique.variables)))#
colnames(header.temp)<-header.new2#
colnames(all.data)<-c("source", "respondent",colnames(header.temp))#
colnames(all.data)<- sub(".", "_",colnames(all.data), fixed=TRUE)#
colnames(small.data)<-c("source", "respondent",colnames(header.temp))#
colnames(small.data)<- sub(".", "_",colnames(small.data), fixed=TRUE)#
colnames(demographic.data)<-c("source", "respondent",as.vector(demographic.unique.variables))#
colnames(demographic.data)<- sub(".", "_",colnames(demographic.data), fixed=TRUE)#
colnames(information.data)<-c("source", "respondent",as.vector(information.unique.variables)  )#
colnames(information.data)<- sub(".", "_",colnames(information.data), fixed=TRUE)#
#
## Input the data#
input.source<-c("CCES_2006", "CCES_2006_MITModule", "CCES_2007", "CCES_2008", "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020", "House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","House_NPAT","Rollcalls", "Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT","Senate_NPAT")#
input.source2<-c("CCES_2006", "CCES_2006",  "CCES_2007", "CCES_2008",  "CCES_2009", "CCES_2010","CCES_2011","CCES_2012","CCES_2013","CCES_2014","CCES_2015","CCES_2016","CCES_2017","CCES_2018","CCES_2019","CCES_2020","CCES_2021","CCES_2010","CCES_2011","NAES_2000", "NAES_2004","Nationscape_cumulative_2019", "Nationscape_cumulative_2020",  "Congress")#
#
toc = Sys.glob("/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/*")#
#
tocRC = toc[grep(".csv",toc)]#
	## Strip out special characters#
	for (p in 1:20){#
		merge_file[,1]<-sub( " ", ".", merge_file[,1], perl=T)#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '\\?', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '"', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\)",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub("\\(",",",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( ',', ".",merge_file[,1])#
	}#
	for (p in 1:5){#
		merge_file[,1]<-gsub( '-', ".",merge_file[,1])#
	}#
#### In order to just run the CCES Module, just uncomment this.#
#### Remember to save it under a different name.#
#####
#tocRC = c(tocRC[3])#
#input.source <- input.source[3]#
#####
#
############################################
## Import all the source dataset								 ###
############################################
#
##length(tocRC)#
##datalist <- list()#
##for(i in 1:length(tocRC)){#
##datalist[[i]] <- read.csv(file=tocRC[i])#
##}#
#
length(tocRC)#
## Loop over datasets#
for(i in 1:length(tocRC)){#
 ##data <- datalist[[i]]#
	data <-  read.csv(file=tocRC[i],#
                 stringsAsFactors = FALSE)              #
    colnames(data)<-tolower(colnames(data))        #
 	print (tocRC[i])#
 	print(dim(data))#
 	source_header<-colnames(data)#
	column<-NA#
	##Define the temporary matrices where we'll put data from this source#
	grab<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	grab2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(unique.variables)))#
	colnames(grab)<-unique(merge_file[,2])#
	colnames(grab2)<-unique(merge_file[,2])#
	##Define the temporary matrices for demographics where we'll put data from this source#
	grab.demographics<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	grab.demographics2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(demographic.unique.variables)))#
	colnames(grab.demographics)<-unique(questions.demographics[,3])#
	colnames(grab.demographics2)<-unique(questions.demographics[,3])#
	##Define the temporary matrices for information where we'll put data from this source#
	grab.information<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	grab.information2<-data.frame(matrix(NA, nrow=dim(data)[1], ncol=length(information.unique.variables)))#
	colnames(grab.information)<-unique(questions.information[,3])#
	colnames(grab.information2)<-unique(questions.information[,3])#
	if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv" | toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv"){#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_2006_MITModule.csv") {#
			ids<-cbind("CCES_2006", data$v1000, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module.csv") {#
			ids<-cbind("CCES_2010", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
#
		if (toc[i]=="/Users/cwarshaw/Dropbox/Representation/IRT Data Files/sources/CCES_Module_2011.csv") {#
			ids<-cbind("CCES_2011", data$v100, 1 )#
			colnames(ids)<-c( "source", "respondent", "module")#
		}#
		dim(demographic.data)#
		demographic.data<-merge(demographic.data, ids, by=c("source", "respondent" ), all.x=T)#
		demographic.data<-subset(demographic.data, is.na(module))#
		dim(demographic.data)#
		demographic.data<-demographic.data[,-dim(demographic.data)[2]]#
		dim(all.data)#
		all.data<-merge(all.data, ids, by=c("source", "respondent" ), all.x=T)#
		all.data<-subset(all.data, is.na(module))#
		dim(all.data)#
		all.data<-all.data[,-dim(all.data)[2]]#
#
		dim(small.data)#
		small.data<-merge(small.data, ids, by=c("source", "respondent" ), all.x=T)#
		small.data<-subset(small.data, is.na(module))#
		dim(small.data)#
		small.data<-small.data[,-dim(small.data)[2]]#
		dim(information.data)#
		information.data<-merge(information.data, ids, by=c("source", "respondent" ), all.x=T)#
		information.data<-subset(information.data, is.na(module))#
		dim(information.data)	#
		information.data<-information.data[,-dim(information.data)[2]]#
	}#
############################################
## Assemble the data for survey respondents	   ###
############################################
	if( length(grep( "NPAT",input.source[i]))==0 & length(grep( "Rollcalls",input.source[i]))==0){#
	##Loop over the list of questions that we want to put in the final roll call matrix#
		for (j in 1:length(merge_file[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",merge_file[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( merge_file[j,3],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (merge_file[j,3])#
				column<- which(unique.variables == merge_file[j,2])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(transformations,oldquestion==merge_file[j,1] &source==input.source[i])#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab[which(is.na(grab[,column])),column]<-temp.data2[which(is.na(grab[,column]))]#
			}#
		}#
	## Make matrix of Demographic data#
		for (j in 1:length(questions.demographics[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.demographics[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.demographics[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.demographics[j,3])#
				column<- which(demographic.unique.variables == as.vector(questions.demographics[j,3]))#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-as.vector(temp.data)#
				question.transformation<-subset(demographics.transformations,oldquestion==as.vector(questions.demographics[j,1]) & newquestion==as.vector(questions.demographics[j,3])  & source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
					temp.data2[temp.data2==""]<-NA#
				}#
					grab.demographics[which(is.na(grab.demographics[,column])),column]<-as.vector(temp.data2[which(is.na(grab.demographics[,column]))])#
					#print (j)#
			}#
			#print (warnings())#
		}#
	## Make matrix of political information data#
		for (j in 1:length(questions.information[,1])) {#
			##Select this column of the data matrix if it matches a question we want#
			match.variable<-paste("^",questions.information[j,1],"$",sep = "")#
			if (length(grep( match.variable,source_header))>0 & length(grep( questions.information[j,2],input.source[i]))>0){#
				## The next two lines of code put the data into the right column in the temporary matrix.#
				##print (questions.information[j,3])#
				column<- which(information.unique.variables == questions.information[j,3])#
				temp.data<-data[,grep( match.variable,source_header)]#
				temp.data2<-temp.data#
				question.transformation<-subset(information.transformations,oldquestion==as.vector(questions.information[j,1]) &source==as.vector(input.source[i]))#
				##Loop over the potential responses to a given question#
				for (p in 1:length(question.transformation[,2])) {				#
					select.rows<-which(temp.data==question.transformation[p,4])#
					temp.data2[select.rows]<-question.transformation[p,5]#
				}#
					grab.information[which(is.na(grab.information[,column])),column]<-as.vector(temp.data2[which(is.na(grab.information[,column]))])#
					##print (j)#
			}#
		}#
	## Fix PID7 in the Nationscape and NAES Data#
#
	if (input.source[i]=="Nationscape_cumulative_2019"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
		if (input.source[i]=="Nationscape_cumulative_2020"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$pid3==1 & data$strength_democrat==1] <-1#
		pid7[data$pid3==1 & data$strength_democrat==2]<-2#
		pid7[data$pid3==3 & data$lean_independent==1]<-3#
		pid7[data$pid3==3 & data$lean_independent==2]<-4#
		pid7[data$pid3==3 & data$lean_independent==3]<-5#
		pid7[data$pid3==2 & data$strength_republican==2]<-6#
		pid7[data$pid3==2 & data$strength_republican==1]<-7#
		grab.demographics$pid7[is.na(grab.demographics$pid7) |grab.demographics$pid7==777 ]<-pid7[is.na(grab.demographics$pid7)|grab.demographics$pid7==777 ]#
	}	#
	if (input.source[i]=="NAES_2000"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cv01==2 & data$cv02==1] <-1#
		pid7[data$cv01==2 & data$cv02==2]<-2#
		pid7[data$cv01==3 & data$cv03==2]<-3#
		pid7[data$cv01==3 & data$cv03==3]<-4#
		pid7[data$cv01==3 & data$cv03==1]<-5#
		pid7[data$cv01==1 & data$cv02==2]<-6#
		pid7[data$cv01==1 & data$cv02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	if (input.source[i]=="NAES_2004"){#
		pid7<-rep(NA, length(grab.demographics$cd))#
		pid7[data$cma01==2 & data$cma02==1] <-1#
		pid7[data$cma01==2 & data$cma02==2]<-2#
		pid7[data$cma01==3 & data$cma03==2]<-3#
		pid7[data$cma01==3 & data$cma03==3]<-4#
		pid7[data$cma01==3 & data$cma03==1]<-5#
		pid7[data$cma01==1 & data$cma02==2]<-6#
		pid7[data$cma01==1 & data$cma02==1]<-7	#
		grab.demographics$pid7<-pid7#
	}	#
	######################################################
	## Fix CCES State Abb's and CD FIPS codes ###
	######################################################
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]!="Senate_NPAT"&input.source[i]!="House_NPAT"&input.source[i]!="NAES_2008"&input.source[i]!="NAES_2004"&input.source[i]!="Nationscape_cumulative_2019"&input.source[i]!="Nationscape_cumulative_2020"){#
		cd<-grab.demographics$cd#
		grab.demographics$cd<-gsub(" ","",grab.demographics$cd)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd==unique(grab.demographics$cd[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd[select.rows2[1]])=="0"|as.vector(grab.demographics$cd[select.rows2[1]])=="98"){#
						grab.demographics$cd[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])==1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd[select.rows1])[j])>1){#
						cd[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd[select.rows2])[j]))#
					#print (unique(grab.demographics$cd[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd<-cd#
	}#
	s<-read.csv(paste(loc.inputs,"states_icpsr.csv",sep=""))#
	if (input.source[i]=="CCES_2012"){#
		cd_redistricted<-grab.demographics$cd_redistricted#
		grab.demographics$cd_redistricted<-gsub(" ","",grab.demographics$cd_redistricted)#
		grab.demographics$abb<-gsub(" ","",grab.demographics$abb)#
		s$STATEAB<-gsub(" ","",s$STATEAB)#
		for(p in 1:length(s$STATEICP)){#
			select.rows1<-which(as.vector(s$STATEAB[p])==grab.demographics$abb)#
			if (length(unique(grab.demographics$cd_redistricted[select.rows1]))>=1){#
				for (j in 1:length(unique(grab.demographics$cd_redistricted[select.rows1]))){#
					select.rows2<-which(grab.demographics$cd_redistricted==unique(grab.demographics$cd_redistricted[select.rows1])[j]&as.vector(s$STATEAB[p])==grab.demographics$abb)#
					if (as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="0"|as.vector(grab.demographics$cd_redistricted[select.rows2[1]])=="98"){#
						grab.demographics$cd_redistricted[select.rows2]<-1#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])==1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], 0,grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					if (nchar(unique(grab.demographics$cd_redistricted[select.rows1])[j])>1){#
						cd_redistricted[select.rows2]<-paste(s$STATEFIP[p], grab.demographics$cd_redistricted[select.rows2], sep="")#
					}#
					#print(s$STATEAB[p])#
					#print (nchar(unique(grab.demographics$cd_redistricted[select.rows2])[j]))#
					#print (unique(grab.demographics$cd_redistricted[select.rows1])[j])#
				}#
			}#
		}#
		grab.demographics$cd_redistricted<-cd_redistricted#
	}#
	super_survey<-1#
	if (super_survey==1){#
		if (input.source[i]=="NAES_2000"){#
			naes2000.fips<-read.csv(paste(loc.inputs,"naes_2000_cd_fips.csv",sep=""),na.strings = ".")#
			colnames(naes2000.fips)<-c("source", "respondent","zip2","cd_fips2")#
			grab.demographics.temp<-cbind(grab.demographics, data[,2])#
			colnames(grab.demographics.temp)<-c(colnames(grab.demographics), "respondent")#
			cd<-merge(grab.demographics.temp, naes2000.fips, by=c("respondent"), all.x=TRUE)#
			grab.demographics$cd<-cd$cd_fips2#
		}#
	}#
		if (input.source[i]!="CCES_Module"){#
			print (cor (as.numeric(as.vector(grab.demographics$self_ideology)), as.numeric(as.vector(grab.demographics$pid3)),use="complete.obs"))#
		}#
		if (input.source[i]=="NAES_2000"){#
			data<-data[,-1]#
		}#
		if (input.source[i]=="NAES_2004"){#
			data<-data[,-1]#
		}	#
		## Append the temporary matrix onto our matrix with all the data from the other sources#
		grab2<-grab#
		grab2<-cbind((as.vector(data[,1])), grab2)#
		grab2<-cbind(input.source[i], grab2)#
		colnames(grab2)<-c("source","respondent",colnames(grab))#
		colnames(grab2)<- sub(".", "_",colnames(grab2), fixed=TRUE)#
		#print (warnings())#
		grab.demographics2<-grab.demographics#
		grab.demographics2<-cbind((as.vector(data[,1])), grab.demographics2)#
		grab.demographics2<-cbind(input.source[i], grab.demographics2)#
		colnames(grab.demographics2)<-c("source","respondent",colnames(grab.demographics))#
		colnames(grab.demographics2)<- sub(".", "_",colnames(grab.demographics2), fixed=TRUE)#
		#print (warnings())#
#
		grab.information2<-grab.information#
		grab.information2<-cbind((as.vector(data[,1])), grab.information2)#
		grab.information2<-cbind(input.source[i], grab.information2)#
		colnames(grab.information2)<-c("source","respondent",colnames(grab.information))#
		colnames(grab.information2)<- sub(".", "_",colnames(grab.information2), fixed=TRUE)#
		#print (warnings())#
		##Sample the survey respondents to reduce size of matrix#
		if (i!=4){#
			number.people<-round(sample.percentage*dim(grab2)[1],0)#
			grab3<-grab2[sample(dim(grab2)[1],number.people,replace=FALSE),]#
		}#
		else{#
			grab3<-grab2#
		}#
		demographic.data<-rbind(demographic.data, grab.demographics2)#
		print(dim(demographic.data))#
		information.data<-rbind(information.data, grab.information2)#
		print(dim(information.data))#
		all.data<-rbind(all.data, grab2)#
		print(dim(all.data))#
		small.data<-rbind(small.data, grab3)#
		print(dim(small.data))	#
	}#
#write.csv( demographic.data,file=paste(loc.outputs,"bigsurvey.demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
#
#if(i==6){#
#	print(table(grab.demographics2$voted_general_validated))#
#}#
#print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
dim(all.data)#
dim(demographic.data)#
}#
save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
demographic.data$age_exact<-as.numeric(as.vector(demographic.data$age_exact))#
demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]<-2006-demographic.data$age_exact[demographic.data$source=="CCES_2006" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]<-2007-demographic.data$age_exact[demographic.data$source=="CCES_2007" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]<-2008-demographic.data$age_exact[demographic.data$source=="CCES_2008" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]<-2010-demographic.data$age_exact[demographic.data$source=="CCES_2010" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]<-2011-demographic.data$age_exact[demographic.data$source=="CCES_2011" & !is.na(demographic.data$age_exact)]#
demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]<-2012-demographic.data$age_exact[demographic.data$source=="CCES_2012" & !is.na(demographic.data$age_exact)]#
#
demographic.data$age[demographic.data$source=="CCES_2006"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2008"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2007"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2010"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2011"]<-NA#
demographic.data$age[demographic.data$source=="NAES_2000"]<-NA#
demographic.data$age[demographic.data$source=="CCES_2012"]<-NA#
#
	union<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2000"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2000"]<-union#
	union<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union2<-demographic.data$union[demographic.data$source=="NAES_2004"]#
	union[union2==1 ]<-1#
	union[union2==2 ]<-1#
	union[union2==3 ]<-1#
	union[union2==4 ]<-0#
	union[union2==998 ]<-NA#
	union[union2==999 ]<-NA#
	demographic.data$union[demographic.data$source=="NAES_2004"]<-union#
demographic.data$age_exact[demographic.data$age_exact < 18]<-NA#
#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact < 30] <- 1#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 29 & demographic.data$age_exact < 45] <- 2#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact > 44 & demographic.data$age_exact < 65] <-3#
demographic.data$age[is.na(demographic.data$age) & demographic.data$age_exact >64] <- 4#
#
temp<-demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]#
temp2<-temp#
temp2[temp==1]<-1#
temp2[temp==2 |  temp==3]<-2#
temp2[temp==4 |  temp==5]<-3#
temp2[temp==6]<-4#
demographic.data$age[(demographic.data$source=="Pew_May2006" | demographic.data$source=="Pew_GV") & !is.na(demographic.data$age)]<-temp2#
#
#demographic.data$respondent<-as.numeric(demographic.data$respondent)#
#demographic.data<-demographic.data[!is.na(demographic.data$respondent),]#
######################################################
## Merge the full response matrix     ###
######################################################
all.data<-as.data.frame(all.data)#
all.data<-all.data[!is.na(all.data$source),]#
#
print(dim(all.data))#
#all.data<-data.frame(all.data)#
#
######################################################
## Export data on number of items each person completed	###   ###
######################################################
#
items<-0#
if (items==1){#
	number.items.completed<-matrix(data=NA, nrow=dim(all.data)[1], ncol=3)#
	number.items.completed[,1]<-all.data[,1]#
	number.items.completed[,2]<-all.data[,2]#
#
	for (i in 1:length(number.items.completed[,1])){#
		number.items.completed[i,3]<-length(all.data[i,which(!is.na(all.data[i,]))])#
	}#
#
	write.csv(number.items.completed,file=paste(loc.outputs,"items.completed.csv",sep=""), row.names=FALSE, na=".")#
}#
######################################################################################
## Using the ideology variable, validate that all item responses are going in same direction across surveys   ###
######################################################################################
check<-0#
if (check==1){#
all.data <- all.data[order(all.data$respondent) , ]#
demographic.data2 <- demographic.data2[order(demographic.data2$respondent) , ]#
demographic.data2$pid3[demographic.data2$source==input.source2[p]]<-as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]])#
#
unique.variables<-unique(merge_file[,3])#
for (j in 1:length(unique.variables)) {#
	##print (unique(unique.variables[j]))#
	temp.data<-matrix(data=NA, nrow=length(input.source), ncol=1)#
	for (p in 1: length(input.source2)){#
		if (sum(!is.na(all.data[all.data$source==input.source2[p],j+2]))>0 & length(unique(demographic.data2$pid3[demographic.data2$source==input.source2[p]]))>1 ){#
			temp.data[p,1]<- (cor (as.numeric(demographic.data2$pid3[demographic.data2$source==input.source2[p]]), as.numeric(all.data[all.data$source==input.source2[p],j+2]),use="complete.obs"))#
		}#
	}#
	is.positive <- function(x) {#
		(x>0)==0#
	}#
	is.negative <- function(x) {#
 		(x<0)==1#
 	}#
 	#print(temp.data[,1])#
	if (length(unique( temp.data[,1]))>2){#
		if (length(unique(is.positive(temp.data[,1])))!=2){#
			print (unique.variables[j])#
			print ("ALERT, THIS VARIABLE MAY NOT BE DEFINED CONSISTENTLY ACROSS SOURCES")#
			print (temp.data[,1])#
		}#
	}#
}#
}#
#
######################################################
## Export the merged response matrix model without roll calls   ###
######################################################
#
#remove empty columns in the full matrix#
#removecol <- c()#
#for (i in 1:dim(all.data)[2]){#
#	if(length(which(is.na(all.data[,i])))==dim(all.data)[1]){#
# 	   removecol <- c(removecol,i)#
#	}#
#}#
#all.data3 <- all.data[,-removecol]#
#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
dim(all.data)#
dim(demographic.data)#
print(table(demographic.data$voted_general_validated[demographic.data$source=="CCES_2010"], useNA="always"))#
#
all.data<-subset(all.data, source!="CCES_2006_MITModule")#
demographic.data<-subset(demographic.data, source!="CCES_2006_MITModule")#
#
##write.csv( all.data,file=paste(loc.outputs,"irt.matrix.noleg.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( all.data,file=paste(loc.outputs,"irt.matrix.csv",sep=""), row.names=FALSE, na=".")#
#write.csv( small.data,file=paste(loc.outputs,"irt.matrix.small.csv",sep=""), row.names=FALSE, na=".")#
#
#demographic.data2$cd<-gsub(" " , "", demographic.data2$cd)#
#
#demographic.data2<-merge(demographic.data2, ssd.fips, by=c("source", "respondent"), all.x=TRUE)#
#abb<-demographic.data$abb.x#
#demographic.data$abb<-gsub(" ","",abb)#
#write.csv( demographic.data,file=paste(loc.outputs,"demographic.matrix.csv",sep=""), row.names=FALSE, na=".")#
saveRDS(demographic.data, file=paste(loc.outputs,"demographic_data.RDS",sep=""))#
saveRDS(all.data, file=paste(loc.outputs,"IRT_data.RDS",sep=""))#
#save.image(file=paste(loc.outputs,"irt.matrix.RData",sep=""))#
#
#demographic.pid<-select(demographic.data, source, respondent, pid3)#
library(tidyverse)#
all.data<-cbind(all.data, demographic.data)#
print(table(all.data$voted_general_validated[all.data$source=="CCES_2010"], useNA="always"))#
#write.csv( all.data,file=paste(loc.outputs,"bigsurveys.csv",sep=""), na=".")#
save(all.data,file=paste(loc.outputs,"bigsurveys.RData",sep=""))#
#all.data[is.na(all.data)]<-NA#
write.dta( all.data,file=paste(loc.outputs,"bigsurveys.dta",sep=""))#
prop.table(table(all.data$source, all.data$cces2014_raisefuelefficiency),1)
library(foreign)#
library(tidyverse)#
library(gender)#
#
###
city_elections<-read.csv( file="cities/city_elections.csv")#
#
## Take out the example city#
city_elections$fips[is.na(city_elections$fips)]<-city_elections$place_fips[is.na(city_elections$fips)]#
city_elections<-select(city_elections, -place_fips)#
city_elections<-filter(city_elections, fips!="26099")#
# Clean variables#
#
## Numeric month variable#
city_elections$month<-as.character(city_elections$month)#
city_elections$month[grepl("January", city_elections$month)]<-1#
city_elections$month[grepl("Febuary", city_elections$month)]<-2#
city_elections$month[grepl("February", city_elections$month)]<-2#
city_elections$month[grepl("March", city_elections$month)]<-3#
city_elections$month[grepl("April", city_elections$month)]<-4#
city_elections$month[grepl("May", city_elections$month)]<-5#
city_elections$month[grepl("June", city_elections$month)]<-6#
city_elections$month[grepl("July", city_elections$month)]<-7#
city_elections$month[grepl("August", city_elections$month)]<-8#
city_elections$month[grepl("September", city_elections$month)]<-9#
city_elections$month[grepl("October", city_elections$month)]<-10#
city_elections$month[grepl("November", city_elections$month)]<-11#
city_elections$month[grepl("December", city_elections$month)]<-12#
city_elections$month[grepl("Apirl", city_elections$month)]<-4#
city_elections$month[grepl("Feburary", city_elections$month)]<-2#
city_elections$month[grepl("november", city_elections$month)]<-11#
city_elections$month[grepl("Novemner", city_elections$month)]<-11#
city_elections$month[grepl("Ocober", city_elections$month)]<-10#
city_elections$month[grepl("april", city_elections$month)]<-4#
city_elections$month<-as.numeric(city_elections$month)#
city_elections$month[city_elections$month>12]<-NA#
## State variable#
city_elections$state <- str_trim(city_elections$state, side = c("both"))#
city_elections$state[city_elections$state=="MN"] <- "Minnesota"#
city_elections$state[city_elections$state=="MO"] <- "Missouri"#
city_elections$state[city_elections$state=="OH"] <- "Ohio"#
city_elections$state[city_elections$state=="OK"] <- "Oklahoma"#
city_elections$state[city_elections$state=="OR"] <- "Oregon"#
city_elections$state[city_elections$state=="PA"] <- "Pennsylvania"#
city_elections$state[city_elections$state=="TN"] <- "Tennessee"#
city_elections$state[city_elections$state=="TX"] <- "Texas"#
city_elections$state[city_elections$state=="VA"] <- "Virginia"#
city_elections$state[city_elections$state=="WA"] <- "Washington"#
city_elections$state[city_elections$state=="WI"] <- "Wisconsin"#
city_elections$state[city_elections$state=="UT"] <- "Utah"#
#
city_elections$district2<-NA#
city_elections$district2<-parse_number(as.character(city_elections$office))#
city_elections$district[is.na(city_elections$district)]<-city_elections$district2[is.na(city_elections$district)]#
#
## fix districts for president or chairs#
city_elections$district<-as.character(city_elections$district)#
city_elections$district[grepl("president", city_elections$office, ignore.case = T)] <- "president" #
city_elections$district[grepl("chair", city_elections$office, ignore.case = T)] <- "chair" #
#
## fix districts for at-large districts#
city_elections$district[city_elections$office=="City Council A" & city_elections$district=="at-large"] <- "at-large (A)" #
city_elections$district[city_elections$office=="City Council B" & city_elections$district=="at-large"]  <- "at-large (B)" #
city_elections$district[city_elections$office=="City Council C" & city_elections$district=="at-large"]  <- "at-large (C)" #
city_elections$district[city_elections$office=="City Council D" & city_elections$district=="at-large"]  <- "at-large (D)" #
city_elections$district[city_elections$office=="City Council E" & city_elections$district=="at-large"]  <- "at-large (E)" #
## Office variable#
city_elections$office <- str_trim(city_elections$office, side = c("both"))#
city_elections$office <-gsub("Large", "large", city_elections$office)#
city_elections$office <-gsub("CIty", "city", city_elections$office)#
city_elections$office <-gsub("Cicy", "city", city_elections$office)#
city_elections$office <-gsub("city", "City", city_elections$office)#
city_elections$office <-gsub("council", "Council", city_elections$office)#
city_elections$office <-gsub("mayor", "Mayor", city_elections$office)#
#
city_elections$office[grepl("Alderman", city_elections$office)] <- "Alderman"#
city_elections$office[grepl("Aldermen", city_elections$office)] <- "Alderman"#
city_elections$office[grepl("Alders", city_elections$office)] <- "Alderman"#
city_elections$office[grepl("City Council", city_elections$office)] <- "City Council"#
city_elections$office[grepl("City Coucil", city_elections$office)] <- "City Council"#
city_elections$office[grepl("Council Member", city_elections$office)] <- "City Council"#
city_elections$office[grepl("Council Place", city_elections$office)] <- "City Council"#
city_elections$office[grepl("Council-at-large", city_elections$office)] <- "City Council"#
city_elections$office[grepl("Councilman", city_elections$office)] <- "City Council"#
city_elections$office[grepl("Councilmember", city_elections$office)] <- "City Council"#
city_elections$office[grepl("At large", city_elections$office)] <- "City Council"#
city_elections$office[grepl("Board of Representatives", city_elections$office)] <- "City Council"#
city_elections$office[grepl("Commissioner", city_elections$office)] <- "Commissioner"#
city_elections$office[grepl("Commission", city_elections$office)] <- "Commissioner"#
city_elections$office[grepl("Mayor", city_elections$office)] <- "Mayor"#
city_elections$office[grepl("Commissioner", city_elections$office)] <- "City Council"#
city_elections$office[grepl("City Clerk", city_elections$office)] <- "Clerk"#
city_elections$office[grepl("Town Clerk", city_elections$office)] <- "Clerk"#
city_elections$office[grepl("City Treasurer", city_elections$office)] <- "Treasurer"#
city_elections$office[grepl("Town Treasurer", city_elections$office)] <- "Treasurer"#
city_elections$office[grepl("President", city_elections$office)] <- "President"#
city_elections$office[grepl("Council", city_elections$office)] <- "City Council" #Sequence after President is key here so that President Council does not get coded as Council member#
### Create simplified office variable#
city_elections$office_consolidated<-NA#
city_elections$office_consolidated[city_elections$office=="City Council"]<-"City Council"#
city_elections$office_consolidated[city_elections$office=="Alderman"]<-"City Council"#
city_elections$office_consolidated[city_elections$office=="Board of Representatives"]<-"City Council"#
city_elections$office_consolidated[city_elections$office=="Mayor"]<-"Mayor"#
city_elections$office_consolidated[city_elections$office=="President"]<-"City Council"#
city_elections$office_consolidated[city_elections$office=="City Director"]<-"City Council"#
city_elections$office_consolidated[city_elections$office=="Assembly"]<-"City Council"#
#city_elections$office_consolidated<-NA#
## District variable#
city_elections$district <- str_trim(city_elections$district, side = c("both"))#
city_elections$district <-gsub("at large", "at-large", city_elections$district)#
city_elections$district <-gsub("at -large", "at-large", city_elections$district)#
city_elections$district <-gsub("At large", "at-large", city_elections$district)#
city_elections$district <-gsub("At-large", "at-large", city_elections$district)#
city_elections$district <-gsub("At Large", "at-large", city_elections$district)#
city_elections$district <-gsub("At-Large", "at-large", city_elections$district)#
city_elections$district <-gsub("a-l", "at-large", city_elections$district)#
city_elections$district <-gsub("a/l", "at-large", city_elections$district)#
city_elections$district <-gsub("AL", "at-large", city_elections$district)#
city_elections$district <-gsub("A-L", "at-large", city_elections$district)#
city_elections$district <-gsub("at--large", "at-large", city_elections$district)#
city_elections$district <-gsub("at--large", "at-large", city_elections$district)#
table(city_elections$district)#
city_elections$district <- gsub("^0+([1-9])", "", city_elections$district)#
table(city_elections$district)#
city_elections$district <-gsub("(four year term)", "", city_elections$district)#
city_elections$district <-gsub("(unexpired term)", "", city_elections$district)#
city_elections$district <-gsub("[()]", "", city_elections$district)#
city_elections$district <-gsub(" seat", "", city_elections$district)#
city_elections$district <-gsub(" District", "", city_elections$district) #
city_elections$district <-gsub("4th", "4", city_elections$district) #
city_elections$district <-gsub("2nd", "2", city_elections$district) #
city_elections$district <-gsub("District ", "", city_elections$district) #
city_elections$district <-gsub("Distict ", "", city_elections$district) #
city_elections$district <-gsub("DIstrict ", "", city_elections$district) #
city_elections$district <-gsub("Position ", "", city_elections$district) #
city_elections$district <-gsub("Place ", "", city_elections$district) #
#
city_elections<-rename(city_elections, place_fips=fips)#
city_elections<-rename(city_elections, city_raw=city)#
#
city_elections$year[is.na(city_elections$year)]<-city_elections$elecyear[is.na(city_elections$year)]#
table(city_elections$year, useNA="always")#
city_elections<-filter(city_elections, !is.na(cand1))#
city_elections<-filter(city_elections, !is.na(year))#
city_elections$election_type<-"General"#
city_elections$election_type[grep(" Runoff", city_elections$year)]<-"Runoff"#
city_elections$election_type[grep(" special", city_elections$year)]<-"Special"#
table(city_elections$election_type)#
city_elections$year<-gsub(" Runoff", "", city_elections$year)#
city_elections$year<-gsub(" special", "", city_elections$year)#
TW_cities_finaldata<-read.csv("Geography/TW_cities_finaldata.csv")#
TW_cities_finaldata$city_pop<-TW_cities_finaldata$city_pop*100#
TW_cities_finaldata<-select(TW_cities_finaldata, abb, city,place_fips, gov_id,city_pop)#
TW_cities_finaldata_ca<-filter(TW_cities_finaldata, abb=="CA")#
#
city_elections<-merge(city_elections, TW_cities_finaldata, by="place_fips")#
#
table(is.na(city_elections$gov_id),city_elections$ra)#
city_elections[is.na(city_elections$gov_id),]#
city_elections[is.na(city_elections$year),]#
#
## check for duplicates#
city_elections$dup<-paste(city_elections$place_fips, city_elections$district, city_elections$office_consolidated, city_elections$year, city_elections$month, city_elections$cand1_votes,  city_elections$cand2_votes)#
#drop duplicates with same top candidate votes for same office/district#
dim(city_elections)#
city_elections$duplicate<-duplicated(paste(city_elections$place_fips,  city_elections$district, city_elections$office_consolidated, city_elections$year, city_elections$month, city_elections$cand1_votes,  city_elections$cand2_votes)) #
#city_elections[city_elections$duplicate==T,]#
city_elections<-filter(city_elections, duplicate==F)#
dim(city_elections)#
#add row number for duplicate at-large districts in same year#
city_elections<-group_by(city_elections, place_fips,office,district,year, month)%>%#
	mutate(#
		n=n(),#
		dup_id = row_number()#
	)#
city_elections$district[city_elections$district=="at-large" & city_elections$n>1 & !is.na(city_elections$district)]<-paste(city_elections$district[city_elections$district=="at-large" & city_elections$n>1& !is.na(city_elections$district)],#
																						city_elections$dup_id[city_elections$district=="at-large" & city_elections$n>1& !is.na(city_elections$district)], sep="-")#
table(city_elections$district[city_elections$n>1])#
table(city_elections$n)#
#
city_elections$district[city_elections$district==""]<-NA#
#
## slice general elections#
city_elections<-arrange(city_elections, place_fips,office,district,year, ra, desc(month))#
city_elections<-group_by(city_elections, place_fips,office,district,year)%>%#
	arrange(desc(month))%>%#
	slice(1)#
#
city_elections<-group_by(city_elections, place_fips,office,district,year, month)%>%#
	mutate(#
		n=n(),#
	)#
table(city_elections$n)#
city_elections$source<-"RAs"#
city_elections[city_elections$n>1,]#
#
## OC-based elections#
council_elections_oc<-read.csv(file="Cities/JDBK/citycouncils_all_candlevel_2022.csv")#
#council_elections_oc2<-read.csv(file="Cities/citycouncils_all_candlevel_202009.csv")#
#council_elections_oc<-merge(council_elections_oc, council_elections_oc2, all.x=T, all.y=T)#
#
council_elections_oc<-rename(council_elections_oc, year=elecyear)#
council_elections_oc<-rename(council_elections_oc, month=elecmonth)#
council_elections_oc<-rename(council_elections_oc, abb=state)#
council_elections_oc<-rename(council_elections_oc, district=district_num)#
#
council_elections_oc$elec_type<-as.character(council_elections_oc$elec_type)#
council_elections_oc$elec_type[council_elections_oc$elec_type=="G"]<-"General"#
#
council_elections_oc<-select(council_elections_oc, -elec_index)#
council_elections_oc<-select(council_elections_oc, -new_raceid)#
council_elections_oc<-select(council_elections_oc, -multi_race_id)#
council_elections_oc<-select(council_elections_oc, -cand1_incumb)#
council_elections_oc<-select(council_elections_oc, -cand2_incumb)#
council_elections_oc$source<-"OC_or_CA"#
council_elections_oc$source_OC <- 1#
#
council_elections_oc$office<-"City Council"#
council_elections_oc$office_consolidated<-"City Council"#
council_elections_oc<-filter(council_elections_oc, votes>0)#
council_elections_oc$pid<-NA#
council_elections_oc$pid[council_elections_oc$cand_party=="-1"]<-"D"#
council_elections_oc$pid[council_elections_oc$cand_party=="1"]<-"R"#
council_elections_oc$pid[council_elections_oc$cand_party=="0"]<-"I"#
#
council_elections_oc_candidates<-select(council_elections_oc, place_fips, abb, city,year, month, office_consolidated,district,cand_fullname, votes,pid,n_winners)#
council_elections_oc_candidates<-rename(council_elections_oc_candidates,full_name=cand_fullname)#
#
## CA elections#
ceda_allcandidates<-read_rds(file="CEDA/ceda_allcandidates_1995-2021_fixed.rds")#
ceda_allcandidates<-select(ceda_allcandidates, place,year, month,office, last, first, votes,cand_number,area,vote_number)#
ceda_allcandidates<-rename(ceda_allcandidates,firstname=first)#
ceda_allcandidates<-rename(ceda_allcandidates,lastname=last)#
ceda_allcandidates$firstname<-str_to_title(ceda_allcandidates$firstname)#
ceda_allcandidates$lastname<-str_to_title(ceda_allcandidates$lastname)#
ceda_allcandidates$office<-str_to_title(ceda_allcandidates$office)#
ceda_allcandidates<-filter(ceda_allcandidates, office=="City Council" | office=="City Council - At Large" | office=="Mayor"#
| office =="City Council-P"  | office=="City Council-R" | office=="City Mayor"| office=="Board Member" | office=="School Board"| office=="School Board Member")#
ceda_allcandidates$place<-str_to_title(ceda_allcandidates$place)#
dim(ceda_allcandidates)#
ceda_allcandidates<-merge(ceda_allcandidates,TW_cities_finaldata_ca, by.x="place", by.y="city")#
dim(ceda_allcandidates)#
ceda_allcandidates<-rename(ceda_allcandidates,city=place)#
ceda_allcandidates<-rename(ceda_allcandidates,district=area)#
table(ceda_allcandidates$district)#
ceda_allcandidates<-rename(ceda_allcandidates,n_winners=vote_number) # this is wrong - should be vote_number!#
ceda_allcandidates$full_name<-tolower(paste(ceda_allcandidates$first, ceda_allcandidates$last, sep=" "))#
#
city_elections$place_fips<-as.character(city_elections$place_fips)#
city_elections<-merge(city_elections, council_elections_oc_ca, all.x=T, all.y=T)#
#
table(city_elections$month, city_elections$source)#
#
city_elections$dup<-paste(city_elections$place_fips, city_elections$district, city_elections$office_consolidated, city_elections$year, city_elections$month, city_elections$cand1_votes,  city_elections$cand2_votes)#
#drop duplicates with same top candidate votes for same office/district#
dim(city_elections)#
city_elections$duplicate<-duplicated(paste(city_elections$place_fips,  city_elections$district, city_elections$office_consolidated, city_elections$year, city_elections$month, city_elections$cand1_votes,  city_elections$cand2_votes)) #
#city_elections[city_elections$duplicate==T,]#
city_elections<-filter(city_elections, duplicate==F)#
dim(city_elections)#
city_elections_votes<-select(city_elections, place_fips, abb,       city,   gov_id,office, office_consolidated, district, year, month, ra, n_winners,election_type,#
cand1_votes, cand2_votes, cand3_votes, cand4_votes, cand5_votes, cand6_votes, cand7_votes, cand8_votes, cand9_votes, cand10_votes, cand11_votes, cand12_votes)#
city_elections_votes$cand1_votes<-as.numeric(as.vector(city_elections_votes$cand1_votes))#
city_elections_votes$cand2_votes<-as.numeric(as.vector(city_elections_votes$cand2_votes))#
city_elections_votes$cand3_votes<-as.numeric(as.vector(city_elections_votes$cand3_votes))#
city_elections_votes$cand4_votes<-as.numeric(as.vector(city_elections_votes$cand4_votes))#
city_elections_votes$cand5_votes<-as.numeric(as.vector(city_elections_votes$cand5_votes))#
city_elections_votes$cand6_votes<-as.numeric(as.vector(city_elections_votes$cand6_votes))#
city_elections_votes$cand7_votes<-as.numeric(as.vector(city_elections_votes$cand7_votes))#
city_elections_votes$cand8_votes<-as.numeric(as.vector(city_elections_votes$cand8_votes))#
city_elections_votes$cand9_votes<-as.numeric(as.vector(city_elections_votes$cand9_votes))#
city_elections_votes$cand10_votes<-as.numeric(as.vector(city_elections_votes$cand10_votes))#
city_elections_votes$cand11_votes<-as.numeric(as.vector(city_elections_votes$cand11_votes))#
city_elections_votes$cand12_votes<-as.numeric(as.vector(city_elections_votes$cand12_votes))#
city_elections_votes<-city_elections_votes %>% pivot_longer(#
  cols = cand1_votes:cand12_votes,#
  names_to = c("candidate"),#
  #names_pattern = "cand_?(.*)_(.)(.*)",#
  values_to = "votes") #
city_elections_votes$candidate<-gsub("_votes", "" ,city_elections_votes$candidate)#
#
city_elections_pid<-select(city_elections, place_fips, abb,       city,   gov_id,office, office_consolidated, district, year, month, ra,  n_winners,election_type,#
cand1_pid, cand2_pid, cand3_pid, cand4_pid, cand5_pid, cand6_pid, cand7_pid, cand8_pid, cand9_pid, cand10_pid, cand11_pid, cand12_pid)#
#
city_elections_pid<-city_elections_pid %>% pivot_longer(#
  cols = cand1_pid:cand12_pid,#
  names_to = c("candidate"),#
  #names_pattern = "cand_?(.*)_(.)(.*)",#
  values_to = "pid") #
city_elections_pid$candidate<-gsub("_pid", "" ,city_elections_pid$candidate)#
#
city_elections_cands<-select(city_elections, place_fips, abb,       city,   gov_id,office, office_consolidated, district, year, month, ra,  n_winners,election_type,#
cand1, cand2, cand3, cand4, cand5, cand6, cand7, cand8, cand9, cand10, cand11, cand12)#
#
city_elections_cands<-city_elections_cands %>% pivot_longer(#
  cols = cand1:cand12,#
  names_to = c("candidate"),#
  #names_pattern = "cand_?(.*)_(.)(.*)",#
  values_to = "full_name") #
#
city_elections_long<-merge(city_elections_cands, city_elections_pid, by=c("place_fips", "abb","city","gov_id", "office",  "office_consolidated", "district", "year",  "month", "n_winners","election_type",  "ra","candidate"))#
dim(city_elections_long)#
city_elections_long<-merge(city_elections_long, city_elections_votes, by=c("place_fips", "abb","city","gov_id", "office",  "office_consolidated", "district", "year",  "month","n_winners", "election_type",   "ra","candidate"))#
dim(city_elections_long)#
city_elections_long$source<-"GW"#
city_elections_long$source_gw<-1#
city_elections_long<-filter(city_elections_long, !is.na(votes))#
dim(city_elections_long)#
council_elections_oc_candidates$source<-"OC"#
#
city_elections_long<-merge(city_elections_long,council_elections_oc_candidates,all.x=T, all.y=T)#
dim(city_elections_long)#
city_elections_long$full_name2<-sub("\\s+\\S+(\\s)", '\\1',city_elections_long$full_name, perl=TRUE)#
#
str_filter <- function(x, sep = ",", side = "left", greedy = TRUE) {#
  gsub(switch(side,#
left  = c(ifelse(greedy, "", "?"), ")", sep, "\\s*"),#
right = c(ifelse(greedy, "?", ""), ")\\s*", sep)) %>%#
         c("(.*", ., "(.*)") %>%#
         paste0(collapse = ""),#
switch(side, left = "\\2", right = "\\1"), x)#
}#
city_elections_long$full_name<-str_filter(city_elections_long$full_name, sep = ",", side ="right", greedy = FALSE)#
#
city_elections_long$full_name<-tolower(city_elections_long$full_name)#
#
city_elections_long$suffix<-NA#
city_elections_long$suffix[grepl(" jr", city_elections_long$full_name, ignore.case = T)] <- "jr" #
city_elections_long$suffix[grepl(" sr", city_elections_long$full_name, ignore.case = T)] <- "sr" #
city_elections_long$suffix[grepl(" iii", city_elections_long$full_name, ignore.case = T)] <- "iii" #
city_elections_long$suffix[grepl(" iv", city_elections_long$full_name, ignore.case = T)] <- "iv" #
#city_elections_long$full_name<-gsub(",", "", city_elections_long$full_name)#
city_elections_long$full_name<-str_replace(city_elections_long$full_name, " \\(.*\\)", "")#
city_elections_long$full_name<-str_replace(city_elections_long$full_name, " iii", "")#
city_elections_long$full_name<-str_replace(city_elections_long$full_name, " ii", "")#
city_elections_long$full_name<-str_replace(city_elections_long$full_name, " jr.", "")#
city_elections_long$full_name<-str_replace(city_elections_long$full_name, " jr", "")#
city_elections_long$full_name<-str_replace(city_elections_long$full_name, " sr.", "")#
city_elections_long$full_name<-str_replace(city_elections_long$full_name, " sr", "")#
city_elections_long$full_name<-trimws(city_elections_long$full_name, "l")#
city_elections_long$full_name<-trimws(city_elections_long$full_name, "r")#
#
fml <- function(mangled_names) {#
  titles <- c("MASTER", "MR", "MISS", "MRS", "MS", #
              "MX", "JR", "SR", "M", "SIR", "GENTLEMAN", #
              "SIRE", "MISTRESS", "MADAM", "DAME", "LORD", #
              "LADY", "ESQ", "EXCELLENCY","EXCELLENCE", #
              "HER", "HIS", "HONOUR", "THE", #
              "HONOURABLE", "HONORABLE", "HON", "JUDGE","Iii", "iv", "v","ii")#
  mangled_names %>% sapply(function(name) {#
    split <- str_split(name, " ") %>% unlist#
    original_length <- length(split)#
    split <- split[which(!split %>% #
                           toupper %>% #
                           str_replace_all('[^A-Z]','')#
                         %in% titles)]#
    case_when(#
      (length(split) < original_length) & #
        (length(split) == 1) ~  c(NA,#
                                  NA,#
                                  split[1]),#
      length(split) == 1 ~ c(NA,NA,split[1]),#
      length(split) == 2 ~ c(split[1],NA,#
                             split[2]),#
      length(split) == 3 ~ c(split[1],#
                             split[2],#
                             split[3]),#
      length(split) > 3 ~ c(split[1],#
                            paste(split[2:(length(split)-1)],#
                                  collapse = "-"),#
                            split[length(split)])#
    )#
  }) %>% t %>% return#
}#
city_elections_long[,c("firstname","middlename","lastname")] <-  city_elections_long$full_name %>% fml#
city_elections_long<-filter(city_elections_long, full_name!="write-in")#
city_elections_long<-filter(city_elections_long, full_name!="write in")#
city_elections_long<-filter(city_elections_long, full_name!="writein")#
#
dim(city_elections_long)#
ceda_allcandidates$office_consolidated<-ceda_allcandidates$office#
ceda_allcandidates$office_consolidated[ceda_allcandidates$office=="City Council - At Large"]<-"City Council"#
ceda_allcandidates$office_consolidated[ceda_allcandidates$office=="City Mayor"]<-"Mayor"#
ceda_allcandidates$office_consolidated[ceda_allcandidates$office=="City Council-R"]<-"City Council"#
#
ceda_allcandidates$source<-"CEDA"#
ceda_allcandidates$source_CEDA<-1#
dim(ceda_allcandidates)#
dim(city_elections_long)#
city_elections_long<-merge(city_elections_long,ceda_allcandidates,all.x=T, all.y=T)#
dim(city_elections_long)#
#
city_elections_long_export<-city_elections_long#
city_elections_long_export<-arrange(city_elections_long_export, place_fips, year,office_consolidated, district,lastname,desc(votes), desc(source))#
#
city_elections_long_export$duplicate<-duplicated(paste(city_elections_long_export$place_fips,   city_elections_long_export$office_consolidated, city_elections_long_export$year, city_elections_long_export$month, city_elections_long_export$votes,  city_elections_long_export$last_name)) #
city_elections_long_export<-filter(city_elections_long_export, duplicate==F)#
city_elections_long_export[city_elections_long_export==""]<-NA#
#
write.dta(city_elections_long_export, file="city_elections_long.dta")#
#
#city_elections_long<-filter(city_elections_long, year>2004)#
city_elections_unique_candidates<-group_by(city_elections_long,  place_fips,office_consolidated,district,firstname, lastname,source) %>% #
	summarise(#
		abb=first(abb),#
		city=first(city),#
		middlename=first(middlename),#
		full_name=first(full_name),#
		n=n()#
	)#
dim(city_elections_unique_candidates)#
table(city_elections_unique_candidates$source)#
#
######
## Mayors#
######
mayors_oc_candlevel<-read.csv(file="Cities/JDBK/mayors_oc_candlevel_2022.csv")#
#mayors_oc_candlevel2<-read.csv(file="Mayors/mayors_oc_MEIcities_candlevel.csv")#
#mayors_oc_candlevel<-merge(mayors_oc_candlevel, mayors_oc_candlevel2, all.x=T, all.y=T)#
mayors_oc_candlevel<-rename(mayors_oc_candlevel, year=elecyear)#
mayors_oc_candlevel<-rename(mayors_oc_candlevel, month=elecmonth)#
mayors_oc_candlevel<-rename(mayors_oc_candlevel, abb=state)#
#
mayors_oc_candlevel$elec_type<-as.character(mayors_oc_candlevel$elec_type)#
mayors_oc_candlevel$elec_type[mayors_oc_candlevel$elec_type=="G"]<-"General"#
mayors_oc_candlevel$office<-"Mayor"#
mayors_oc_candlevel$office_consolidated<-"Mayor"#
mayors_oc_candlevel<-filter(mayors_oc_candlevel, votes>0)#
mayors_oc_candlevel<- select( mayors_oc_candlevel, -abb)#
mayors_oc_candlevel<- select( mayors_oc_candlevel, -city)#
mayors_oc_candlevel<-merge(mayors_oc_candlevel, TW_cities_finaldata, by="place_fips")#
mayors_oc_candlevel$pid[mayors_oc_candlevel$cand_party== -1]<-"D"#
mayors_oc_candlevel$pid[mayors_oc_candlevel$cand_party== 1]<-"R"#
mayors_oc_candlevel_candidates<-select(mayors_oc_candlevel, place_fips, abb, city,year, month, office_consolidated,cand_fullname, votes,pid,cand_party)#
mayors_oc_candlevel_candidates<-rename(mayors_oc_candlevel_candidates,full_name=cand_fullname)#
mayors_oc_candlevel_candidates$source<-"OC"#
mayors_oc_candlevel_candidates$source_OC <- 1#
#
mayors_oc_candlevel_pid<-select( ungroup(mayors_oc_candlevel_candidates),place_fips, year ,month, office_consolidated  , votes ,  pid)#
mayors_oc_candlevel_pid<-rename(mayors_oc_candlevel_pid, pid_oc=pid)#
#mayors_oc_candlevel_pid$full_name<-str_to_title(mayors_oc_candlevel_pid$full_name, locale = "en")#
mayors<-read.csv(file="Mayors/mayors.csv")#
mayors<-filter(mayors, YearData>1989)#
mayors$source<-"CW_JDBK"#
mayors<-rename(mayors, year=YearData)#
mayors<-rename(mayors, place_fips=fips)#
mayors<-merge(mayors, TW_cities_finaldata, by="place_fips")#
mayors$office<-"Mayor"#
mayors$office_consolidated<-"Mayor"#
mayors<-select(mayors, place_fips, abb, city,year, month, office_consolidated, mayor_name_final,runnerup_name_final,mayor_votes_final,runnerup_votes_final,mayor_party_final,runnerup_party_final,elecdate)#
mayors$month2<-substr(mayors$elecdate, 1,2)#
mayors$month[is.na(mayors$month)]<-mayors$month2[is.na(mayors$month)]#
mayors$month<-gsub("/", "", mayors$month)#
#
mayors<-select(mayors, -month2, -elecdate)#
mayors<-rename(mayors, cand1=mayor_name_final)#
mayors<-rename(mayors, cand2=runnerup_name_final)#
mayors<-rename(mayors, cand1_votes=mayor_votes_final)#
mayors<-rename(mayors, cand2_votes=runnerup_votes_final)#
mayors<-rename(mayors, cand1_pid=mayor_party_final)#
mayors<-rename(mayors, cand2_pid=runnerup_party_final)#
#
## fixes based on columbia data #
mayors$cand1_votes[mayors$place_fips==3420260 & mayors$year==1997]<-14081   #Edison NJ 1997#
mayors$cand2_votes[mayors$place_fips==3420260 & mayors$year==1997]<-5782  #Edison NJ 1997#
mayors[mayors$place_fips==3420260 & mayors$year==1997,]#
#
mayors_votes<-mayors %>% pivot_longer(#
  cols = c(cand1_votes,cand2_votes),#
  names_to = c("candidate"),#
  #names_pattern = "cand_?(.*)_(.)(.*)",#
  values_to = "votes") #
  mayors_votes<-select(mayors_votes, -cand1, -cand2,-cand1_pid,-cand2_pid)#
  mayors_votes$candidate<-gsub("_votes", "", mayors_votes$candidate)#
#
mayors_candidate<-mayors %>% pivot_longer(#
  cols = c(cand1,cand2),#
  names_to = c("candidate"),#
  #names_pattern = "cand_?(.*)_(.)(.*)",#
  values_to = "name") #
   mayors_candidate<-select(mayors_candidate, -cand1_votes, -cand2_votes,-cand1_pid,-cand2_pid)#
#
mayors_pid<-mayors %>% pivot_longer(#
  cols = c(cand1_pid,cand2_pid),#
  names_to = c("candidate"),#
  #names_pattern = "cand_?(.*)_(.)(.*)",#
  values_to = "pid") #
   mayors_pid<-select(mayors_pid, -cand1_votes, -cand2_votes,-cand1, -cand2)#
  mayors_pid$candidate<-gsub("_pid", "", mayors_pid$candidate)#
#
mayors_candidates<-merge(mayors_candidate, mayors_votes, by=c("place_fips", "abb", "city", "year", "month", "office_consolidated","candidate"))#
mayors_candidates<-merge(mayors_candidates, mayors_pid, by=c("place_fips", "abb", "city", "year", "month", "office_consolidated","candidate"))#
mayors_candidates<-select(mayors_candidates, -candidate)#
mayors_candidates<-rename(mayors_candidates, full_name=name)#
drop<-grepl("write-in", mayors_candidates$full_name)#
dim(mayors_candidates)#
mayors_candidates<-mayors_candidates[drop==F,]#
dim(mayors_candidates)#
table(grepl("write-in", mayors_candidates$full_name))#
mayors_candidates$source<-"CW_JDBK"#
mayors_candidates$source_CW_JDBKM <- 1#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " \\(.*\\)", "")#
mayors_candidates<-merge(mayors_candidates, mayors_oc_candlevel_candidates, all.x=T, all.y=T)#
mayors_candidates<-merge(mayors_candidates,mayors_oc_candlevel_pid,all.x=T, by=c("place_fips","year", "month", "office_consolidated","votes"))#
#
check<-filter(mayors_candidates, (pid=="D" & pid_oc=="R")| (pid=="R" & pid_oc=="D"))#
#city_elections_long$full_name<-gsub(",", "", city_elections_long$full_name)#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " \\(.*\\)", "")#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " iii", "")#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " ii", "")#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " jr.", "")#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " jr", "")#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " sr.", "")#
mayors_candidates$full_name<-str_replace(mayors_candidates$full_name, " sr", "")#
mayors_candidates$full_name<-trimws(mayors_candidates$full_name, "l")#
mayors_candidates$full_name<-trimws(mayors_candidates$full_name, "r")#
#
mayors_candidates[,c("firstname","middlename","lastname")] <-  mayors_candidates$full_name %>% fml#
#
mayors_candidates$dup<-paste(mayors_candidates$place_fips, mayors_candidates$office_consolidated, mayors_candidates$year,  mayors_candidates$votes, mayors_candidates$office_consolidated,mayors_candidates$lastname)#
mayors_candidates$dup<-(duplicated(mayors_candidates$dup) | duplicated(mayors_candidates$dup, fromLast = TRUE))#
table(mayors_candidates$source, mayors_candidates$dup)#
dim(mayors_candidates)#
mayors_candidates<-arrange(mayors_candidates, desc(source))#
mayors_candidates$dup<-paste(mayors_candidates$place_fips, mayors_candidates$office_consolidated, mayors_candidates$year,  mayors_candidates$votes, mayors_candidates$office_consolidated,mayors_candidates$lastname)#
mayors_candidates$dup<-duplicated(mayors_candidates$dup, fromLast = TRUE) #
mayors_candidates<-filter(mayors_candidates, dup==F)#
table(mayors_candidates$source, mayors_candidates$pid)#
#
#mayors_candidates$source<-"Mayors"#
city_elections_long_export2<-merge(city_elections_long_export, mayors_candidates, all.x=T, all.y=T)#
city_elections_long_export2$lastname<-tolower(city_elections_long_export2$lastname)#
city_elections_long_export2$firstname<-tolower(city_elections_long_export2$firstname)#
#
city_elections_long_export2$office_consolidated[city_elections_long_export2$office_consolidated=="City Mayor"]<-"Mayor"#
city_elections_long_export2$district[city_elections_long_export2$office_consolidated=="Mayor"]<-"Mayor"#
city_elections_long_export2$pid_numeric<-NA#
city_elections_long_export2$pid_numeric[city_elections_long_export2$pid=="D"]<- -1#
city_elections_long_export2$pid_numeric[city_elections_long_export2$pid=="R"]<- 1#
## pid#
pid<-group_by(city_elections_long_export2,place_fips,district,office_consolidated,lastname,year)%>%#
	summarise(pid_numeric=mean(pid_numeric, na.rm=T))#
city_elections_long_export2<-select(city_elections_long_export2, -pid_numeric)#
## check for duplicates#
#city_elections_long_export2$dup<-paste(city_elections_long_export2$place_fips, city_elections_long_export2$district, city_elections_long_export2$office_consolidated, city_elections_long_export2$year,  city_elections_long_export2$votes, city_elections_long_export2$office_consolidated,city_elections_long_export2$lastname)#
#city_elections_long_export2$duplicate2<-duplicated(city_elections_long_export2$dup)#
city_elections_long_export2<-group_by(city_elections_long_export2,place_fips,district,office_consolidated,lastname, year)%>%#
	arrange(desc(votes),source)%>%#
	slice(1)#
table(city_elections_long_export2$source)#
city_elections_long_export2$dup<-paste(city_elections_long_export2$place_fips,  city_elections_long_export2$office_consolidated, city_elections_long_export2$year,  city_elections_long_export2$votes, city_elections_long_export2$office_consolidated,city_elections_long_export2$lastname)#
city_elections_long_export2$duplicate2<-duplicated(city_elections_long_export2$dup)#
city_elections_long_export2<-filter(city_elections_long_export2, duplicate2==F)#
#
## doublecheck to make sure no duplicates, priv. the original mayors data where possible#
city_elections_long_export2$source_order<-NA#
city_elections_long_export2$source_order[city_elections_long_export2$source=="CW_JDBK"]<-1#
city_elections_long_export2$source_order[city_elections_long_export2$source=="OC"]<-1#
city_elections_long_export2$source_order[city_elections_long_export2$source=="GW"]<-3#
city_elections_long_export2$source_order[city_elections_long_export2$source=="CEDA"]<-3#
#
city_elections_long_export2<-arrange(city_elections_long_export2,place_fips,district,office_consolidated,lastname, year, source_order,votes )#
city_elections_long_export2<-group_by(city_elections_long_export2,place_fips,district,office_consolidated,lastname, year)%>%#
	slice(1)#
#
table(city_elections_long_export2$source)#
city_elections_long_export2<-merge(city_elections_long_export2, pid, by=c("place_fips","district","office_consolidated","lastname",  "year"))#
city_elections_long_export2$pid[city_elections_long_export2$pid_numeric=="-1"]<- "D"#
city_elections_long_export2$pid[city_elections_long_export2$pid_numeric=="1"]<- "R"#
#
dim(city_elections_long_export2)#
#city_elections_long_export2<-filter(city_elections_long_export2, duplicate2==F)#
dim(city_elections_long_export2)#
city_elections_long_export2[city_elections_long_export2==""]<-NA#
city_elections_long_export2$pid<-as.character(city_elections_long_export2$pid)#
#
city_elections_long_export2$office[city_elections_long_export2$office_consolidated=="Mayor"]<-"Mayor"#
#
city_elections_long_export2$firstname<-gsub("'", '', city_elections_long_export2$firstname)#
city_elections_long_export2$lastname<-gsub("'", '', city_elections_long_export2$lastname)#
city_elections_long_export2$firstname<-gsub('"', "", city_elections_long_export2$firstname, fixed=TRUE)#
city_elections_long_export2$lastname<-gsub('"', "", city_elections_long_export2$lastname, fixed=TRUE)#
city_elections_long_export2$firstname<-tolower(str_trim(city_elections_long_export2$firstname, side = c("both", "left", "right")))#
city_elections_long_export2$lastname<-tolower(str_trim(city_elections_long_export2$lastname, side = c("both", "left", "right")))#
city_elections_long_export2$firstname<-word(city_elections_long_export2$firstname, 1)#
city_elections_long_export2<-filter(city_elections_long_export2, year>1949)#
#
table(city_elections_long_export2$source, city_elections_long_export2$pid)#
#
write.dta(city_elections_long_export2, file="Intermediate_Data/cities/city_elections_long.dta")#
save(city_elections_long_export2, file="Intermediate_Data/cities/city_elections_long.RData")#
#
#mayors_candidates<-filter(mayors_candidates, year>2004)#
city_elections_unique_candidates2<-city_elections_long_export2#
city_elections_unique_candidates2$firstname<-str_to_title(city_elections_unique_candidates2$firstname)#
city_elections_unique_candidates2$lastname<-str_to_title(city_elections_unique_candidates2$lastname)#
dim(city_elections_unique_candidates2)#
city_elections_unique_candidates2<-group_by(city_elections_unique_candidates2,  place_fips,firstname,middlename, lastname, office_consolidated) %>% #
	summarise(#
		district=first(district),#
		last_year=max(year),#
		pid=first(pid),#
		abb=first(abb),#
		city=first(city),#
		office_consolidated=first(office_consolidated),#
		full_name=first(full_name),#
		n=n()#
	)#
dim(city_elections_unique_candidates2)#
table(city_elections_unique_candidates2$source)#
table(city_elections_unique_candidates2$office_consolidated)#
#
save(city_elections_unique_candidates2, file="Intermediate_Data/cities/city_elections_candidates.RData")#
TW_cities_finaldata<-select(TW_cities_finaldata, place_fips, city_pop)#
city_elections_unique_candidates2<-merge(city_elections_unique_candidates2,TW_cities_finaldata, by="place_fips", all.x=T )
stargazer(month_all_house4_byyear<-(felm(outcome~(treatment):factor(year)+dem_share_house_cd_lag|st_cd_year+county_fips2|0|county_fips2+DMA_year, data=subset(data_analysis_house_all_last_twomonths ))))#
#
data_analysis_all_last_twomonths$treatment<-data_analysis_all_last_twomonths$D_advantage_ads_pres#
data_analysis_all_last_twomonths$outcome<-data_analysis_all_last_twomonths$dem_share_pres#
#
data_analysis_all_last_twomonths$ads_otherraces<-data_analysis_all_last_twomonths$ads_otherraces_pres#
data_analysis_all_last_twomonths$treatment_dems<-data_analysis_all_last_twomonths$ads_dem_pres#
data_analysis_all_last_twomonths$treatment_reps<-data_analysis_all_last_twomonths$ads_rep_pres#
data_analysis_all_last_twomonths$treatment_dems_sq<-data_analysis_all_last_twomonths$ads_dem_pres*data_analysis_all_last_twomonths$ads_dem_pres#
data_analysis_all_last_twomonths$treatment_reps_sq<-data_analysis_all_last_twomonths$ads_rep_pres*data_analysis_all_last_twomonths$ads_rep_pres#
data_analysis_all_last_twomonths$total_ads_pres<-data_analysis_all_last_twomonths$ads_dem_pres+data_analysis_all_last_twomonths$ads_rep_pres
####
#
data_analysis_all_last_twomonths$treatment<-data_analysis_all_last_twomonths$D_advantage_ads_pres#
data_analysis_all_last_twomonths$outcome<-data_analysis_all_last_twomonths$dem_share_pres#
#
data_analysis_all_last_twomonths$ads_otherraces<-data_analysis_all_last_twomonths$ads_otherraces_pres#
data_analysis_all_last_twomonths$treatment_dems<-data_analysis_all_last_twomonths$ads_dem_pres#
data_analysis_all_last_twomonths$treatment_reps<-data_analysis_all_last_twomonths$ads_rep_pres#
data_analysis_all_last_twomonths$treatment_dems_sq<-data_analysis_all_last_twomonths$ads_dem_pres*data_analysis_all_last_twomonths$ads_dem_pres#
data_analysis_all_last_twomonths$treatment_reps_sq<-data_analysis_all_last_twomonths$ads_rep_pres*data_analysis_all_last_twomonths$ads_rep_pres#
data_analysis_all_last_twomonths$total_ads_pres<-data_analysis_all_last_twomonths$ads_dem_pres+data_analysis_all_last_twomonths$ads_rep_pres
data_analysis_house_last_twomonths$DMA_year<-paste(data_analysis_house_last_twomonths$DMA, data_analysis_house_last_twomonths$year, sep="-")#
data_analysis_house_last_twomonths$border_year<-paste(data_analysis_house_last_twomonths$border, data_analysis_house_last_twomonths$year, sep="-")#
#
data_analysis_house_last_twomonths$treatment<-data_analysis_house_last_twomonths$D_advantage_ads_house/100#
data_analysis_house_last_twomonths$outcome<-data_analysis_house_last_twomonths$dem_share_house_cd*100#
data_analysis_house_last_twomonths$treatment_dems<-data_analysis_house_last_twomonths$ads_dem_house/100#
data_analysis_house_last_twomonths$treatment_reps<-data_analysis_house_last_twomonths$ads_rep_house/100#
data_analysis_house_last_twomonths$treatment_dems_sq<-data_analysis_house_last_twomonths$treatment_dems*data_analysis_house_last_twomonths$treatment_dems#
data_analysis_house_last_twomonths$treatment_reps_sq<-data_analysis_house_last_twomonths$treatment_reps*data_analysis_house_last_twomonths$treatment_reps#
data_analysis_house_last_twomonths$treatment_dems_cubed<-data_analysis_house_last_twomonths$ads_dem_house*data_analysis_house_last_twomonths$ads_dem_house*data_analysis_house_last_twomonths$ads_dem_house#
data_analysis_house_last_twomonths$treatment_reps_cubed<-data_analysis_house_last_twomonths$ads_rep_house*data_analysis_house_last_twomonths$ads_rep_house*data_analysis_house_last_twomonths$ads_rep_house#
data_analysis_house_last_twomonths$total_ads_house<-data_analysis_house_last_twomonths$treatment_dems+data_analysis_house_last_twomonths$treatment_reps
130*1.15
lint
library(dgo)
dgirt_in_abortion <- shape(opinion, item_names = "abortion", time_name = "year",#
  geo_name = "state", group_names = "race3", geo_filter = c("CA", "GA", "LA",#
    "MA"), id_vars = "source")
dgmrp_out_abortion <- dgmrp(dgirt_in_abortion, iter = 1500, chains = 4, cores =#
  4, seed = 42)
10.7/27.7
1/.387
load("/Users/cwarshaw/Dropbox/Projects/Local Elections Data/Data/data_gender_imputation_matrix_withnames.RDS")
load("/Users/cwarshaw/Dropbox/Projects/Local Elections Data/Data/data_race_imputation_matrix_withnames.RDS")
load("/Users/cwarshaw/Dropbox/Projects/Local Elections Data/Data/data_pid_imputation_matrix_withnames.RDS")
library(tidyverse)#
#
data<-readRDS("data_gender_imputation_matrix_withnames.RDS")#
#
gender<-readRDS("gender_predictions.csv")#
pid<-readRDS("pid_predictions.csv")#
race<-readRDS("race_predictions.csv")
50261.2/3600
4678.4/3600
251.4-203.8
250.8-203.8
250.8-204
dat<-readRDS("~/Dropbox/Projects/Local Elections Data Paper/Data/city_candidates_foranalysis_candinfo.rds")
filter(dat, lastname=="peak")
dat[1,]
library(tidyverse)
dat[1,]
filter(dat, lastname=="peak")
filter(dat, lastname=="peak" & firstname=="frosty")
library(tidyverse)
library(foreign)
data<-read.dta("~/Dropbox/Projects/Dynamic_MRP/book/Dynamic Democracy Data for WashingtonPost/Mass Opinion and Proximity with Policy on Individual Issues/issue_mrp_data.dta")
data<-filter(data, policy_area=="Gun Control")
dim(data)
table(data$policy)
table(data$policy_name)
data2<-filter(data, policy_name=="Assault Weapon Ban")
data2<-filter(data, year==2020)
data2[1,]
data2
data2<-filter(data, policy_name=="Assault Weapon Ban")
data2<-filter(data, policy_name=="Assault Weapon Ban" & year==2020)
data2[1,]
data2<-arrange(data2, abb)
data2<-arrange(data2, state_abb)
data2[1,]
data2[1:5,]
data2<-filter(data, policy=="w_guncontrol_bc_privatesales" & year==2020)
data2[1:5,]
data2<-arrange(data2, state_abb)
data2[1:5,]
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
rebuild_cmdstan(#
  dir = cmdstan_path(),#
  cores = getOption("mc.cores", 2),#
  quiet = FALSE,#
  timeout = 600#
)
library(cmdstanr)
rebuild_cmdstan(#
  dir = cmdstan_path(),#
  cores = getOption("mc.cores", 2),#
  quiet = FALSE,#
  timeout = 600#
)
## Requires you to already have cmdstanr installed on your machine#
library(tidyverse)#
devtools::install_github("devincaughey/dbmm")#
library(dbmm)#
#
options(mc.cores = parallel::detectCores())#
#
## Read the data#
policies_data <- read.csv("policies_long.csv")#
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))#
glimpse(policies_data)#
#
## Shape the data for the model#
shaped_data <- shape_data(#
    long_data = policies_data,#
    unit_var = "abb",#
    time_var = "year",#
    item_var = "variable",#
    value_var = "value_real",#
    standardize = TRUE,#
    periods_to_estimate = 2018:2020#
)
## Requires you to already have cmdstanr installed on your machine#
library(tidyverse)#
devtools::install_github("devincaughey/dbmm")#
library(dbmm)#
#
options(mc.cores = parallel::detectCores())#
#
## Read the data#
policies_data <- read.csv("policies_long.csv")#
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))#
glimpse(policies_data)#
#
## Shape the data for the model#
shaped_data <- shape_data(#
    long_data = policies_data,#
    unit_var = "abb",#
    time_var = "year",#
    item_var = "variable",#
    value_var = "value_real",#
    standardize = TRUE,#
    periods_to_estimate = 1998:2020#
)
## Requires you to already have cmdstanr installed on your machine#
library(tidyverse)#
devtools::install_github("devincaughey/dbmm")#
library(dbmm)#
#
options(mc.cores = parallel::detectCores())#
#
## Read the data#
policies_data <- read.csv("policies_long.csv")#
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))#
glimpse(policies_data)#
#
## Shape the data for the model#
shaped_data <- shape_data(#
    long_data = policies_data,#
    unit_var = "abb",#
    time_var = "year",#
    item_var = "variable",#
    value_var = "value_real",#
    standardize = TRUE,#
    periods_to_estimate = 2018:2020#
)
## Run the latent factor model #
fitted_model <- fit(#
    data = shaped_data,#
    n_dim = 1,#
    chains = 4,#
    parallelize_within_chains = TRUE,#
    threads_per_chain = 2,#
    constant_alpha = TRUE,#
    separate_eta = TRUE,#
    init_kappa = FALSE,#
    force_recompile = FALSE,#
    iter_warmup = 500,#
    iter_sampling = 500,#
    adapt_delta = .9,#
    refresh = 10,#
    seed = 123#
)#
## Extract draws#
raw_draws <- extract_draws(fitted_model)#
#
## Rotate draws for identification#
id_draws <- identify_draws(raw_draws)#
id_summ <- summary(id_draws$id_draws)#
summary(id_summ)#
#
lab_draws <- label_draws(id_draws)
### Make some graphs to visualize the estimates#
lab_draws$eta %>%#
    group_by(UNIT) %>%#
    summarise(est = mean(value), err = sd(value)) %>%#
     ungroup()%>%#
   mutate(UNIT = reorder(UNIT, -est)) %>%#
    ggplot(aes(x = est, y = UNIT)) +#
    geom_pointrange(aes(xmin = est - 1.96*err, xmax = est + 1.96*err)) +#
    labs(#
        title = "State policy scores",#
        x = "Policy score (95% CI)",#
        y = NULL#
    )#
lab_draws$eta %>%#
    group_by(UNIT,TIME) %>%#
    summarise(est = mean(value), err = sd(value)) %>%filter(TIME==2020) %>%#
    ungroup()%>%#
    mutate(UNIT = reorder(UNIT, -est)) %>%#
    ggplot(aes(x = est, y = UNIT)) +#
    geom_pointrange(aes(xmin = est - 1.96*err, xmax = est + 1.96*err)) +#
    labs(#
        title = "State policy scores",#
        x = "Policy score (95% CI)",#
        y = NULL#
    )
policies_data <- read.csv("policies_long.csv")#
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))#
glimpse(policies_data)#
#
policies<-unique(policies_data$variable)
i<-1
## Shape the data for the model#
shaped_data <- shape_data(#
    long_data = filter(policies_data, variable!=policies[i]),#
    unit_var = "abb",#
    time_var = "year",#
    item_var = "variable",#
    value_var = "value_real",#
    standardize = TRUE,#
    periods_to_estimate = 2020:2020#
)#
#
## Run the latent factor model #
fitted_model <- fit(#
    data = shaped_data,#
    n_dim = 1,#
    chains = 4,#
    parallelize_within_chains = TRUE,#
    threads_per_chain = 2,#
    constant_alpha = TRUE,#
    separate_eta = TRUE,#
    init_kappa = FALSE,#
    force_recompile = FALSE,#
    iter_warmup = 500,#
    iter_sampling = 500,#
    adapt_delta = .9,#
    refresh = 10,#
    seed = 123#
)
## Output a summary of the estimates#
estimates_all=lab_draws$eta %>%#
    group_by(UNIT,TIME) %>%#
    summarise(est = mean(value), std_err = sd(value)) %>%#
     rename(abb=UNIT, year=TIME)%>%#
     mutate(year=as.numeric(as.vector(year)))%>%#
   filter(year>1998)#
write.csv(estimates_all, file="policy_index_outputs/test.csv")
## Estimate climate policy liberalism model#
## Requires you to already have cmdstanr installed on your machine#
## See: https://mc-stan.org/cmdstanr/index.html#
#
## Load tidyverse#
library(tidyverse)#
#
## Install the Dynamic Bayesian Measurement Models package#
devtools::install_github("devincaughey/dbmm")#
## Load the Dynamic Bayesian Measurement Models package#
library(dbmm)#
#
options(mc.cores = parallel::detectCores())#
#
## Read the data#
policies_data <- read.csv("policies_long.csv")#
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))#
glimpse(policies_data)
## Shape the data for the model#
shaped_data <- shape_data(#
    long_data = policies_data,#
    unit_var = "abb",#
    time_var = "year",#
    item_var = "variable",#
    value_var = "value_real",#
    standardize = TRUE,#
    periods_to_estimate = 1998:2020#
)
## Extract draws#
raw_draws <- extract_draws(fitted_model)#
#
## Rotate draws for identification#
id_draws <- identify_draws(raw_draws)#
#
id_summ <- summary(id_draws$id_draws)#
summary(id_summ)#
#
lab_draws <- label_draws(id_draws)#
#
lab_draws$eta %>%#
    group_by(UNIT) %>%#
    summarise(est = mean(value), err = sd(value)) %>%#
     ungroup()%>%#
   mutate(UNIT = reorder(UNIT, -est)) %>%#
    ggplot(aes(x = est, y = UNIT)) +#
    geom_pointrange(aes(xmin = est - 1.96*err, xmax = est + 1.96*err)) +#
    labs(#
        title = "State policy scores",#
        x = "Policy score (95% CI)",#
        y = NULL#
    )#
lab_draws$eta %>%#
    group_by(UNIT,TIME) %>%#
    summarise(est = mean(value), err = sd(value)) %>%filter(TIME==2020) %>%#
    ungroup()%>%#
    mutate(UNIT = reorder(UNIT, -est)) %>%#
    ggplot(aes(x = est, y = UNIT)) +#
    geom_pointrange(aes(xmin = est - 1.96*err, xmax = est + 1.96*err)) +#
    labs(#
        title = "State policy scores",#
        x = "Policy score (95% CI)",#
        y = NULL#
    )#
estimates_all=lab_draws$eta %>%#
    group_by(UNIT,TIME) %>%#
    summarise(est = mean(value), std_err = sd(value)) %>%#
     rename(abb=UNIT, year=TIME)%>%#
     mutate(year=as.numeric(as.vector(year)))%>%#
   filter(year>1998)#
#write.csv(estimates_all, file=paste0("robustness_checks/state_climate_policy_liberalism_",policy,".csv"))#
posterior=lab_draws$eta %>%#
    select(-name, -time, -unit)%>%#
    rename(abb=UNIT, year=TIME)%>%#
     mutate(year=as.numeric(as.vector(year)))%>%#
    filter(year>1998)%>% #
    group_by(.draw)%>%nest()%>%ungroup()%>%slice_sample(n=200)%>%unnest(cols = c(data)) #https://stackoverflow.com/questions/37149649/randomly-sample-groups#
saveRDS(posterior, file=paste0("robustness_checks/test",policy,".RDS"))
policy<-policies[i]
saveRDS(posterior, file=paste0("robustness_checks/test",policy,".RDS"))
## this code creates the descriptive figures presented in the paper. #
#
# Preamble #### #
rm(list=ls())#
library(foreign)#
library(tidyverse)#
library(sandwich)#
library(texreg)#
library(orcutt)#
library(sp)#
library(grid)#
library(rgeos)#
library(maptools)#
if (!require(gpclib)) install.packages("gpclib", type="source")#
gpclibPermit()#
library(grid)#
library(ggrepel)#
library(dotwhisker)#
library(xtable)#
library(broom)#
library(modelsummary)#
library(estimatr)#
library(ggforce)#
library(ggpubr)#
library(usmap)#
library(colorRamps)#
library(RColorBrewer)#
library(ggmap)#
library(sf)#
library(tigris)#
library(tidycensus)#
#
onUser<-function(x){#
  user<-Sys.info()["user"]#
  onD<-grepl(x,user,ignore.case=TRUE)#
  return(onD)#
}#
if(onUser("spb95")){#
  setwd("~/Dropbox (Personal)/State Energy Policy Liberalism/replication")#
  figures<-"~/Dropbox (Personal)/State Energy Policy Liberalism/drafts/figures/"#
  papertables<-"~/Dropbox (Personal)/State Energy Policy Liberalism/drafts/tables/"#
}#
#
if(onUser("cwarshaw")){#
  setwd("~/Dropbox/Projects/State Energy Policy Liberalism/replication")#
  figures<-"~/Dropbox/Projects/State Energy Policy Liberalism/figures_chris/"#
  paperfigures<-"~/Dropbox/Projects/State Energy Policy Liberalism/figures_chris/"#
  papertables<-"~/Dropbox/Projects/State Energy Policy Liberalism/tables_chris/"#
}#
#
lag.new <- function(x, n = 1L, along_with){#
  index <- match(along_with - n, along_with, incomparable = NA)#
  out <- x[index]#
  attributes(out) <- attributes(x)#
  out#
}
