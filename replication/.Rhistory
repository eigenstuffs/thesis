c3 <- lm(data = p, formula = log(CI) ~ log(Chamber) + log(ManuUnion) + log(FarmWages) + log(MiningWages) + log(Renewables) + log(CoalPrice) + log(OilPrice) + log(OilPrice) + log(GDPpc) + log(Population))
c3 <- lm(data = p, formula = log(CI) ~ log(Chamber) + log(ManuUnion) + log(FarmWages) + log(MiningWages) + log(Renewables) + log(CoalPrice) + log(NatPrice) + log(OilPrice) + log(GDPpc) + log(Population))
View(p)
options(scipen=999)
library(tidyverse)
library(haven)
library(reshape)
library(plm)
library(lmtest)
library(sandwich)
library(car)
library(mgcv)
library(MBESS)
library(bda)
library(jtools)
library(huxtable)
set.seed(07151129)
ci <- read.csv("data/raw_ci.csv")
ei <- read.csv("data/raw_ei.csv")
energy <- read.csv("data/raw_consumption.csv")
gdpcurrent <- read.csv("data/raw_currentgdp.csv")
renewables <- read.csv("data/raw_renewables.csv")
production <- read.csv("data/raw_production.csv")
prices <- read.csv("data/raw_prices.csv")
ng <- read.csv("data/raw_ng.csv")
union <- read.csv("data/raw_union.csv")
wages <- read.csv("data/raw_wage.csv")
incpc <- read.csv("data/raw_inc.csv")
pop <- read.csv("data/raw_pop.csv")
ideology <- read_dta("data/raw_shormccarty.dta")
states <- as.data.frame(state.x77)
state_mapping <- data.frame(
Full_State = c(
"Alabama", "Alaska", "Arizona", "Arkansas", "California",
"Colorado", "Connecticut", "Delaware",  "DistrictofColumbia", "Florida", "Georgia",
"Hawaii", "Idaho", "Illinois", "Indiana", "Iowa",
"Kansas", "Kentucky", "Louisiana", "Maine", "Maryland",
"Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri",
"Montana", "Nebraska", "Nevada", "NewHampshire", "NewJersey",
"NewMexico", "NewYork", "NorthCarolina", "NorthDakota", "Ohio",
"Oklahoma", "Oregon", "Pennsylvania", "RhodeIsland", "SouthCarolina",
"SouthDakota", "Tennessee", "Texas", "Utah", "Vermont",
"Virginia", "Washington", "WestVirginia", "Wisconsin", "Wyoming"
),
Abbreviation = c(
"AL", "AK", "AZ", "AR", "CA",
"CO", "CT", "DE", "DC", "FL", "GA",
"HI", "ID", "IL", "IN", "IA",
"KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO",
"MT", "NE", "NV", "NH", "NJ",
"NM", "NY", "NC", "ND", "OH",
"OK", "OR", "PA", "RI", "SC",
"SD", "TN", "TX", "UT", "VT",
"VA", "WA", "WV", "WI", "WY"
)
)
ci <- ci[5:56,]
colnames(ci) <- ci[1,]
ci <- ci[2:52,1:53]
ei <- ei[2:53,]
colnames(ei) <- ei[1,]
ei <- ei[2:52,1:63]
renewables <- renewables[,1:26]
colnames(energy) <- energy[2,]
energy <- energy[3:53,1:63]
colnames(gdpcurrent) <- gdpcurrent[2,]
gdpcurrent <- gdpcurrent[3:53,1:26]
colnames(ng) <- ng[2,]
ng <- ng[3:53,1:63]
colnames(union) <- union[2,]
union <- union[3:10202,]
colnames(wages) <- wages[3,]
wages <- wages[4:156,]
colnames(incpc) <- incpc[3,]
incpc <- incpc[4:54,2:25]
colnames(pop) <- pop[2,]
pop <- pop[3:53,1:63]
prices <- prices[,c(2:3,32:54)]
production <- production[,c(2:3,42:64)]
colnames(prices) <- gsub("X","",colnames(prices))
colnames(production) <- gsub("X","",colnames(production))
total <- wages[wages$LineCode=="50",]
farm <- wages[wages$LineCode=="81",]
mining <- wages[wages$LineCode=="200",]
total_prod <- production[production$MSN == "TEPRB",]
oil_prod <- production[production$MSN == "PAPRB",]
nat_prod <- production[production$MSN == "NGMPB",]
ren_prod <- production[production$MSN == "NGMPB",]
coal_prod <- production[production$MSN == "CLPRB",]
coal_price <- prices[prices$MSN == "CLTCD",]
nat_price <- prices[prices$MSN == "NGTCD",]
oil_price <- prices[prices$MSN == "PATCD",]
total_prod <- total_prod %>% select(!MSN)
oil_prod <- oil_prod %>% select(!MSN)
nat_prod <- nat_prod %>% select(!MSN)
ren_prod <- ren_prod %>% select(!MSN)
coal_prod <- coal_prod %>% select(!MSN)
coal_price <- coal_price %>% select(!MSN)
nat_price <- nat_price %>% select(!MSN)
oil_price <- oil_price %>% select(!MSN)
total <- total[,c(2,5:27)]
farm <- farm[,c(2,5:27)]
mining <- mining[,c(2,5:27)]
ci <- melt(ci, id = "State")
ei <- melt(ei, id = "State")
energy <- melt(energy, id = "State")
gdpcurrent <- melt(gdpcurrent, id = "State")
renewables <- melt(renewables, id = "State")
ng <- melt(ng, id = "State")
total <- melt(total, id = "GeoName")
farm <- melt(farm, id = "GeoName")
mining <- melt(mining, id = "GeoName")
pop <- melt(pop, id = "State")
incpc <- melt(incpc, id = "GeoName")
union <- union[union$Sector == "Priv. Manufacturing",]
union <- as.data.frame(cbind(union$State, union$Year, union$`Membership Rate`))
union$V3 <- as.numeric(gsub("%","",union$V3))/100
total_prod <- melt(total_prod, id = "StateCode")
coal_prod <- melt(coal_prod, id = "StateCode")
ren_prod <- melt(ren_prod, id = "StateCode")
nat_prod <- melt(nat_prod, id = "StateCode")
oil_prod <- melt(oil_prod, id = "StateCode")
coal_price <- melt(coal_price, id = "State")
nat_price <- melt(nat_price, id = "State")
oil_price <- melt(oil_price, id = "State")
list <- list(ci, ei, energy, gdpcurrent, renewables, ng, total, farm, mining, pop, incpc, union, total_prod, coal_prod, ren_prod, nat_prod, oil_prod, coal_price, nat_price, oil_price)
convert_state_name <- function(state_name) {
if (state_name %in% state_mapping$Full_State) {
return(state_mapping$Abbreviation[match(state_name, state_mapping$Full_State)])
} else {
return(state_name)
}
}
p <- data.frame()
list <- lapply(list, function(df) {
colnames(df) <- c("State", "Year", "Value")
df$State <- gsub("*", "", df$State)
df$State <- gsub(" ", "", df$State)
df$State <- sapply(df$State, convert_state_name)
df$Year <- gsub("X", "", df$Year)
df$Year <- as.numeric(df$Year)
df$Value <- gsub(",","",df$Value)
df$Value <- as.numeric(df$Value)
df <- df[df$Year>=1998&df$Year<=2020,]
return(df)
})
list[[11]][list[[11]]$State=="Alaska*",]$State <- "AK"
list[[11]][list[[11]]$State=="Hawaii*",]$State <- "HI"
p <- Reduce(function(x, y) merge(x, y, by=c("State", "Year"), all = TRUE), list)
ideology <- as.data.frame(cbind(ideology$st, ideology$year, ideology$hou_chamber, ideology$sen_chamber))
colnames(ideology) <- c("State","Year","House","Senate")
ideology$House <- as.numeric(ideology$House)
ideology$Senate <- as.numeric(ideology$Senate)
ideology$Chamber <- ideology$Senate
str(ideology)
for (i in 1:nrow(ideology)) {
if (!is.na(ideology[i,3]) && !is.na(ideology[i,4])) {
ideology[i,5] <- (ideology[i,3] + ideology[i,4])/2
}
}
states$State <- rownames(states)
states$State <- gsub(" ","",states$State)
states$State <- sapply(states$State,convert_state_name)
states <- states[states$State!="DC",]
states <- subset(states, select = c("State", "Area"))
ideology <- ideology[ideology$Year >= 1998 & ideology$Year <= 2020,]
p <- merge(ideology, p, by=c("State","Year"))
p <- merge(p, states, by="State")
colnames(p) <- c("State","Year","House","Senate","Chamber","CI","EI","TotalEnergy","GDPCurrent","Renewables","NatGas","TotalWages","FarmWages","MiningWages","Population","IncomePC","ManuUnion","TotalProd","CoalProd","RenProd","GasProd","OilProd","CoalPrice","NatPrice","OilPrice","Area")
p$FarmWages <- (p$FarmWages/p$TotalWages)
p$MiningWages <- (p$MiningWages/p$TotalWages)
p$Renewables <- (p$Renewables/p$TotalEnergy)+1
p$NatGas <- (p$NatGas/p$TotalEnergy)+1
p$GDPpc <- (p$GDPCurrent/p$Population)
p$CoalValue <- (p$CoalPrice * p$CoalProd)/p$GDPCurrent
p$NatValue <- (p$NatPrice * p$GasProd)/p$GDPCurrent
p$OilValue <- (p$OilPrice * p$OilProd)/p$GDPCurrent
p$Chamber <- p$Chamber + 10
p$ManuUnion <- p$ManuUnion + 1
p$CoalValue <- p$CoalValue + 1
p$NatValue <- p$NatValue + 1
p$OilValue <- p$OilValue + 1
p$RenProd <- (p$RenProd/p$TotalProd)+1
p$CoalProd <- (p$CoalProd/p$TotalProd)+1
p$NatProd <- (p$GasProd/p$TotalProd)+1
p$OilProd <- (p$OilProd/p$TotalProd)+1
p$CoalPrice <- p$CoalPrice + 1
p$OilPrice <- p$OilPrice + 1
p$NatPrice <- p$NatPrice + 1
p <- subset(p, select = c(-House,-Senate,-TotalEnergy,-TotalWages,-Area))
#p$Chamber <- log(p$Chamber)
#p$CI <- log(p$CI)
#p$EI <- log(p$EI)
#p$Renewables <- log(p$Renewables)
#p$NatGas <- log(p$NatGas)
#p$FarmWages <- log(p$FarmWages)
#p$MiningWages <- log(p$MiningWages)
#p$IncomePC <- log(p$IncomePC)
#p$ManuUnion <- log(p$ManuUnion)
#p$Population <- log(p$Population)
p$CI_Lag1 <- lag(p$CI, 1)
p$EI_Lag1 <- lag(p$EI, 1)
#p$GDPCurrent <- log(p$GDPCurrent)
write.csv(p, "p.csv")
#p <- as.data.frame(lapply(p, sample))
p <- read.csv("p.csv")[,2:29]
3 <- lm(data = p, formula = log(CI) ~ log(Chamber) + log(ManuUnion) + log(FarmWages) + log(MiningWages) + log(Renewables) + log(CoalPrice) + log(NatPrice) + log(OilPrice) + log(GDPpc) + log(Population))
c3 <- lm(data = p, formula = log(CI) ~ log(Chamber) + log(ManuUnion) + log(FarmWages) + log(MiningWages) + log(Renewables) + log(CoalPrice) + log(NatPrice) + log(OilPrice) + log(GDPpc) + log(Population))
e3 <- lm(data = p, formula = log(EI) ~ log(Chamber) + log(ManuUnion) + log(FarmWages) + log(MiningWages) + log(Renewables) + log(CoalPrice) + log(NatPrice) + log(OilPrice) + log(GDPpc) + log(Population))
c4 <- lm(data = p, formula = log(CI_Lag1) ~ log(Chamber) + log(ManuUnion) + log(FarmWages) + log(MiningWages) + log(Renewables) + log(CoalPrice) + log(NatPrice) + log(OilPrice) + log(GDPpc) + log(Population))
e4 <- lm(data = p, formula = log(EI_Lag1) ~ log(Chamber) + log(ManuUnion) + log(FarmWages) + log(MiningWages) + log(Renewables) + log(CoalPrice) + log(NatPrice) + log(OilPrice) + log(GDPpc) + log(Population))
vif(c3)
plot_summs(c3, e3, c4, e4, model.names = c("Carbon Intensity", "Energy Intensity", "Carbon Intensity, DV Lag k=1", "Energy Intensity, DV Lag k=1"), robust = "HC3")
export_summs(c3, e3, c4, e4, model.names = c("Carbon Intensity", "Energy Intensity", "Carbon Intensity, DV Lag k=1", "Energy Intensity, DV Lag k=1"))
#knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/Zack/Documents/UCLA/Courses/C277_NetworkScience/")
#library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
# Create objects.  You can use any name you want, such as "cat" or "block".
myname <- 5
two <- 2
three <- 3
two + three
zachary <- 2
is <- 3
awesome <- 4
zachary + is + awesome
zachary - awesome
awesome/zachary
# If you later forget what is in an object, just type the object's name
two
awesome
# What is 38271 times 38191?
38271 * 38191
# What is 38271 divided by 38191?  Multiply that result by 4.2.
38271 / 38191
# Create an object that contains five numbers.  Multiply those numbers by 2.  Add 82 to those numbers.
obj <- c(1,2,3,4,5)
obj * 2
obj + 82
# Create a second object that contains five numbers.  Multiply the two objects together and save the result as a new object.  Divide the two objects, saving the result as a new object.
obj_2 <- c(6,7,8,9,10)
obj_prod <- obj * obj_2
obj_div <- obj / obj_2
# Use the below vector to answer the following questions.
# Does the vector contain the word "tomato"?
# How many times does the vector contain the word "words"?
# Search the vector for the number 29.
# Search the vector for the number 100.
#knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/brandenb/Documents/R/Courses/C277_NetworkScience/")
#library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
knitr::opts_knit$set(root.dir = "/Users/brandenb/Documents/R/Courses/C277_NetworkScience/")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
# Create a 2x3 matrix, filling down columns
a <- matrix(1:6, nrow=2)
a
# Fill across rows
b <- matrix(5:14, nrow=2, byrow=TRUE)
b
# Row 2, column 3
a[2,3]
# All rows, column 2
b[,2]
# All columns, row 1
a[1,]
adjacency <- matrix(c(0,1,1,1,0,1,0,0,1), nrow=3)
m <- matrix(0:1, nrow=10, ncol=10)
char_vec <- c("these", "are", "some", "words")
length(char_vec)
# %in% requires exact matches
'words' %in% char_vec
'word' %in%  char_vec
c('words', 'word') %in% char_vec
# The grep family
grep('word', char_vec)
grepl('word', char_vec)
grep('word', char_vec, value=TRUE)  # Return the match
# gsub is very useful
gsub('word', 'more words', char_vec)  # Why are there two s?
# paste example
these <- paste(c('those','these','is','are'), collapse='|')
grepl(these, char_vec)
char_vec
"tomato" %in% char_vec
grep("words", char_vec)
grep(29, char_ve)
grep(29, char_vec)
grep(100, char_vec)
char_vec <- c("this", "vector", "contains", "words", "that", "have", "letters", "and", "numbers", 29, "30")
"tomato" %in% char_vec
char_vec <- c("this", "vector", "contains", "words", "that", "have", "words", "with", "letters", "and", "numbers", 29, "30")
characters <- c("this", "vector", "contains", "words", "that", "have", "words", "with", "letters", "and", "numbers", 29, "30")
# What is 38271 times 38191?
38271 * 38191
# What is 38271 divided by 38191?  Multiply that result by 4.2.
38271 / 38191
# Create an object that contains five numbers.  Multiply those numbers by 2.  Add 82 to those numbers.
obj <- c(1,2,3,4,5)
obj * 2
obj + 82
# Create a second object that contains five numbers.  Multiply the two objects together and save the result as a new object.  Divide the two objects, saving the result as a new object.
obj_2 <- c(6,7,8,9,10)
obj_prod <- obj * obj_2
obj_div <- obj / obj_2
# Use the below vector to answer the following questions.
characters <- c("this", "vector", "contains", "words", "that", "have", "words", "with", "letters", "and", "numbers", 29, "30")
# Does the vector contain the word "tomato"?
"tomato" %in% characters
# Yes
# How many times does the vector contain the word "words"?
grep("words", characters)
# One
# Search the vector for the number 29.
grep(29, characters)
# Search the vector for the number 100.
grep(100, characters)
grepl("words", characters)
sum(grepl("words", characters))
"tomato" %in% characters
# What is 38271 times 38191?
38271 * 38191
# What is 38271 divided by 38191?  Multiply that result by 4.2.
(38271 / 38191) * 4.2
# Create an object that contains five numbers.  Multiply those numbers by 2.  Add 82 to those numbers.
obj <- c(1,2,3,4,5)
obj <- obj * 2
obj <- obj + 82
# Create a second object that contains five numbers.  Multiply the two objects together and save the result as a new object.  Divide the two objects, saving the result as a new object.
obj_2 <- c(6,7,8,9,10)
obj_prod <- obj * obj_2
obj_div <- obj / obj_2
# Use the below vector to answer the following questions.
characters <- c("this", "vector", "contains", "words", "that", "have", "words", "with", "letters", "and", "numbers", 29, "30")
# Does the vector contain the word "tomato"?
"tomato" %in% characters
# How many times does the vector contain the word "words"?
sum(grepl("words", characters))
# Search the vector for the number 29.
grep(29, characters)
# Search the vector for the number 100.
grep(100, characters)
sum(grepl("words", characters))
sum(grepl("words", characters))
grep(29, characters)
grep(29, characters)
grep(100, characters)
grep(100, characters)
library(jtools)
library(car)
library(plm)
library(tidyverse)
set.seed(07151129)
panel <- read.csv("p.csv")[,2:31] # exlcuding ID column
View(panel)
plot(k1)
k1 <- lm(Emissions ~ Population + GDPpc + CI + EI, data = panel)
k2 <- lm(log(Emissions) ~ log(Population) + log(GDPpc) + log(CI) + log(EI), data = panel)
plot(k1)
plot(k2)
export_summs(k1, k2, robust = "HC3", model.names = c("Linear", "Log-linear"))
plot_coefs(k1,k2)
m1 <- lm(log(CI) ~ log(Chamber) + factor(State) + factor(Year), data = panel)
m2 <- lm(log(EI) ~ log(Chamber) + factor(State) + factor(Year), data = panel)
m3 <- lm(log(CI_Lag1) ~ log(Chamber) + factor(State) + factor(Year), data = panel)
m4 <- lm(log(EI_Lag1) ~ log(Chamber) + factor(State) + factor(Year), data = panel)
export_summs(m1, m3, m2, m4, model.names = c("Carbon Intensity", "Lagged Carbon Intensity",
"Energy Intensity", "Lagged Energy Intensity"))
plot(m1)
plot(m2)
plot(m3)
plot(m4)
m5 <- lm(log(CI) ~ log(Chamber) + log(GDPpc) + log(Population) + log(Renewables) + log(NatGas)
+ log(ManuUnion) + log(CoalValue) + log(OilValue) + log(MiningWages) + log(FarmWages), data = panel)
m6 <- lm(log(EI) ~ log(Chamber) + log(GDPpc) + log(Population) + log(Renewables) + log(NatGas)
+ log(ManuUnion) + log(CoalValue) + log(OilValue) + log(MiningWages) + log(FarmWages),, data = panel)
m7 <- lm(log(CI_Lag1) ~ log(Chamber) + log(GDPpc) + log(Population) + log(Renewables) + log(NatGas)
+ log(ManuUnion) + log(CoalValue) + log(OilValue) + log(MiningWages) + log(FarmWages),, data = panel)
m8 <- lm(log(EI_Lag1) ~ log(Chamber) + log(GDPpc) + log(Population) + log(Renewables) + log(NatGas)
+ log(ManuUnion) + log(CoalValue) + log(OilValue) + log(MiningWages) + log(FarmWages),, data = panel)
vif(m5)
vif(m6)
vif(m7)
vif(m8)
plot_coefs(m5,m7,m6,m8, model.names = c("Carbon Intensity", "Lagged Carbon Intensity",
"Energy Intensity", "Lagged Energy Intensity"))
export_summs(m5,m7,m6,m8, model.names = c("Carbon Intensity", "Lagged Carbon Intensity",
"Energy Intensity", "Lagged Energy Intensity"),robust="HC3")
ggplot(panel, aes(x=Year, y=Emissions, color=State)) +
geom_line()
ggplot(panel, aes(x=Year, y=CI, color=State)) +
geom_line()
ggplot(panel, aes(x=Year, y=EI, color=State)) +
geom_line()
ggplot(panel, aes(x=Year, y=Chamber, color=State)) +
geom_line()
panel_left <- panel[panel$Chamber <= 10.067,]
panel_right <- panel[panel$Chamber > 10.067,]
p_panel <- pdata.frame(panel)
View(p_panel)
p1 <- plm(log(CI) ~ log(Chamber), data = p_panel, model = "within", effect = "twoways")
p2 <- plm(log(EI) ~ log(Chamber), data = p_panel, model = "within", effect = "twoways")
summary(p1)
summary(p2)
summary(p1)
summary(p2)
p1 <- plm(log(CI) ~ log(Chamber) + log(Renewables), data = p_panel, model = "within", effect = "twoways")
summary(p1)
p2 <- plm(log(EI) ~ log(Chamber) + log(ManuUnion), data = p_panel, model = "within", effect = "twoways")
summary(p2)
baseline_E_FE <- lm(Emissions ~ Chamber + factor(State) + factor(Year), data = panel)
baseline_E_FE_R2 <- summary(baseline_E_FE)$r.squared
n_permutations <- 1000
permuted_stats <- numeric(n_permutations)
for(i in 1:n_permutations) {
shuffled_data <- panel
shuffled_data$Chamber <- sample(shuffled_data$Chamber)
model <- lm(Emissions ~ Chamber + factor(State) + factor(Year), data=shuffled_data)
permuted_stats[i] <- summary(model)$r.squared
}
p_value <- mean(permuted_stats >= baseline_E_FE_R2)
p_value
baseline_CI_FE <- lm(CI ~ Chamber + factor(State) + factor(Year), data = panel)
baseline_CI_FE_R2 <- summary(baseline_CI_FE)$r.squared
n_permutations <- 1000
permuted_stats <- numeric(n_permutations)
for(i in 1:n_permutations) {
shuffled_data <- panel
shuffled_data$Chamber <- sample(shuffled_data$Chamber)
model <- lm(CI ~ Chamber + factor(State) + factor(Year), data=shuffled_data)
permuted_stats[i] <- summary(model)$r.squared
}
p_value <- mean(permuted_stats >= baseline_CI_FE_R2)
p_value
baseline_EI_FE <- lm(EI ~ Chamber + factor(State) + factor(Year), data = panel)
baseline_EI_FE_R2 <- summary(baseline_EI_FE)$r.squared
n_permutations <- 1000
permuted_stats <- numeric(n_permutations)
for(i in 1:n_permutations) {
shuffled_data <- panel
shuffled_data$Chamber <- sample(shuffled_data$Chamber)
model <- lm(EI ~ Chamber + factor(State) + factor(Year), data=shuffled_data)
permuted_stats[i] <- summary(model)$r.squared
}
p_value <- mean(permuted_stats >= baseline_EI_FE_R2)
p_value
load("~/Documents/R/thesis/replication/cleaned_data_for_analysis.Rda")
View(analysis2)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
install_cmdstan()
## Load tidyverse
library(tidyverse)
## Install the Dynamic Bayesian Measurement Models package
devtools::install_github("devincaughey/dbmm")
options(mc.cores = parallel::detectCores())
## Read the data
policies_data <- read.csv("policies_long.csv")
setwd("~/Documents/R/thesis/replication")
## Read the data
policies_data <- read.csv("policies_long.csv")
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))
View(policies_data)
unique(policies_data)$variable
unique(policies_data$variable)
## Shape the data for the model
shaped_data <- shape_data(
long_data = policies_data,
unit_var = "abb",
time_var = "year",
item_var = "variable",
value_var = "value_real",
standardize = TRUE,
periods_to_estimate = 1998:2020
)
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))
glimpse(policies_data)
## Read the data
policies_data <- read.csv("policies_long.csv")
policies_data<-filter(policies_data, variable!="environment_utility_deregulation_21" & !is.na(abb)& !is.na(value_real))
glimpse(policies_data)
unique(policies_data$variable)
## Shape the data for the model
shaped_data <- shape_data(
long_data = policies_data,
unit_var = "abb",
time_var = "year",
item_var = "variable",
value_var = "value_real",
standardize = TRUE,
periods_to_estimate = 1998:2020
)
## Load tidyverse
library(tidyverse)
## Shape the data for the model
shaped_data <- shape_data(
long_data = policies_data,
unit_var = "abb",
time_var = "year",
item_var = "variable",
value_var = "value_real",
standardize = TRUE,
periods_to_estimate = 1998:2020
)
library(readr)
policies_updated <- read_csv("policies_updated.csv")
View(policies_updated)
policies <- read.csv("policies_updated.csv")
write.csv(policies_updated, "policies.csv")
policies <- read.csv("policies.csv")
