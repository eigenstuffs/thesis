---
title: "replication_modeling"
author: "Branden Bohrnsen"
date: "11 February 2024"
execute:
  echo: false
  warning: false
format: html
editor: visual
---

### Replication File -- Modeling

```{r}
options(scipen=999)
library(tidyverse)
library(patchwork)
library(jtools)
library(stringr)
library(car)
set.seed(07151129)

science_theme = theme(panel.grid.major = element_line(linewidth = 0.5, color = "grey"),
    axis.line = element_line(linewidth = 0.7, color = "black"), legend.position = c(0.85,
        0.7), text = element_text(size = 10))
theme_set(science_theme)
```

```{r}
panel <- read.csv("panel_with_count_FEB11.csv")
```

**Side-by-side plots of variable and log(variable + x) with x being the minimum constant necessary to have all \>= 1**

```{r}
p1 <- ggplot(panel, aes(x=CarbonIntensity)) + geom_histogram() + labs(y = "Count", title = "Carbon Intensity Distributions")
p2 <- ggplot(panel, aes(x=log(CarbonIntensity))) + geom_histogram() + labs(y = "")

p1 + p2

p3 <- ggplot(panel, aes(x=EnergyIntensity)) + geom_histogram() + labs(y = "Count", title = "Energy Intensity Distributions")
p4 <- ggplot(panel, aes(x=log(EnergyIntensity))) + geom_histogram() + labs(y = "")

p3 + p4

p5 <- ggplot(panel, aes(x=GDPPerCapita)) + geom_histogram() + labs(y = "Count", title = "GDP Per Capita Distributions")
p6 <- ggplot(panel, aes(x=log(GDPPerCapita))) + geom_histogram() + labs(y = "")

p5 + p6

p7 <- ggplot(panel, aes(x=Population)) + geom_histogram() + labs(y = "Count", title = "Population Distributions")
p8 <- ggplot(panel, aes(x=log(Population))) + geom_histogram() + labs(y = "")

p7 + p8

p9 <- ggplot(panel, aes(x=Weighted_GHI)) + geom_histogram() + labs(y = "Count", title = "Global Horizontal Irradiance Distributions")
p10 <- ggplot(panel, aes(x=log(Weighted_GHI+0.90731127))) + geom_histogram() + labs(y = "")

p9 + p10

p11 <- ggplot(panel, aes(x=Weighted_Speed120m)) + geom_histogram() + labs(y = "Count", title = "Wind Speeds at 120m Distributions")
p12 <- ggplot(panel, aes(x=log(Weighted_Speed120m+0.8489861))) + geom_histogram() + labs(y = "")

p11 + p12

p13 <- ggplot(panel, aes(x=PropManuEmployment)) + geom_histogram() + labs(y = "Count", title = "Proportion of Manufacturing Empl. Distributions")
p14 <- ggplot(panel, aes(x=log(PropManuEmployment+1))) + geom_histogram() + labs(y = "")

p13 + p14

p15 <- ggplot(panel, aes(x=PropFarmEmployment)) + geom_histogram() + labs(y = "Count", title = "Proportion of Farm Empl. Distributions")
p16 <- ggplot(panel, aes(x=log(PropFarmEmployment+1))) + geom_histogram() + labs(y = "")

p15 + p16

p17 <- ggplot(panel, aes(x=PercentUrban)) + geom_histogram() + labs(y = "Count", title = "Percentage of Urban Population Distributions")
p18 <- ggplot(panel, aes(x=log(PercentUrban))) + geom_histogram() + labs(y = "")

p17 + p18

p19 <- ggplot(panel, aes(x=Ideology)) + geom_histogram() + labs(y = "Count", title = "Ideology Distributions")
p20 <- ggplot(panel, aes(x=log(Ideology+2.3760))) + geom_histogram() + labs(y = "")

p19 + p20
```

**Fixed effects models + models without influential values**

```{r}
m1 <- lm(
  data = panel, log(CarbonIntensity) ~ Ideology + factor(State) + factor(Year)
)

m2 <- lm(
  data = panel, log(EnergyIntensity) ~ Ideology + factor(State) + factor(Year)
)

cooks_distance_m1 <- cooks.distance(m1)
influential_m1 <- which(cooks_distance_m1 > (4/(length(cooks_distance_m1)-length(coefficients(m1)))))
m3 <- update(m1, subset = -influential_m1)

cooks_distance_m2 <- cooks.distance(m2)
influential_m2 <- which(cooks_distance_m2 > (4/(length(cooks_distance_m2)-length(coefficients(m2)))))
m4 <- update(m2, subset = -influential_m2)

#summary(m1)
#summary(m2)
```

**Multiple Linear Regressions + models without influential values**

```{r}
m5 <- lm(
  data = panel, log(CarbonIntensity) ~ Ideology + log(GDPPerCapita) + log(Population) + Weighted_GHI + Weighted_Speed120m + PercentUrban + PropManuEmployment + PropFarmEmployment
)

m6 <- lm(
  data = panel, log(EnergyIntensity) ~ Ideology + log(GDPPerCapita) + log(Population) + Weighted_GHI + Weighted_Speed120m + PercentUrban + PropManuEmployment + PropFarmEmployment
) 

#summary(m5)
#summary(m6)

vif(m6)

cooks_distance_m5 <- cooks.distance(m5)
influential_m5 <- which(cooks_distance_m5 > (4/(length(cooks_distance_m5)-length(coefficients(m5)))))
m7 <- update(m5, subset = -influential_m5)

cooks_distance_m6 <- cooks.distance(m6)
influential_m6 <- which(cooks_distance_m6 > (4/(length(cooks_distance_m6)-length(coefficients(m6)))))
m8 <- update(m6, subset = -influential_m6)
```

**Permutation Inference - Carbon Intensity \~ Ideology with State/Year FEs**

```{r}
baseline_CI_FE <- lm(log(CarbonIntensity) ~ Ideology + factor(State) + factor(Year), data = panel)

baseline_coef_Ideology <- coef(baseline_CI_FE)["Ideology"]

n_permutations <- 1000
permuted_coefs <- numeric(n_permutations)

for(i in 1:n_permutations) {
  # Rotate ideologies within each state
  shuffled_data <- panel %>%
    group_by(State) %>%
    mutate(
      order = row_number(), # Preserves original order
      shift = sample(1:n(), 1), # Random shift for each state
      Ideology = Ideology[(order - shift) %% n() + 1] # Apply shift
    ) %>%
    ungroup()
  
  model <- lm(log(CarbonIntensity) ~ Ideology + factor(State) + factor(Year), data=shuffled_data)
  permuted_coefs[i] <- coef(model)["Ideology"]
}

ggplot() + 
  geom_histogram(aes(x = permuted_coefs), fill = "darkgray", color = "white") + 
  geom_vline(aes(xintercept = baseline_coef_Ideology), color = "black") +
  labs(x = "Permuted Coefficients for Ideology", y = "Count",
       title = "Permutation Inference for Carbon Intensity ~ Ideology with State/Year FEs",
       subtitle = "Vertical line = real estimate; n = 1,000; coefficients generated by rotating Ideology") + science_theme

p_value <- mean(abs(permuted_coefs) >= abs(baseline_coef_Ideology))
p_value
```

**Permutation Inference - Energy Intensity \~ Ideology with State/Year FEs**

```{r}
baseline_EI_FE <- lm(log(EnergyIntensity) ~ Ideology + factor(State) + factor(Year), data = panel)

baseline_coef_Ideology <- coef(baseline_EI_FE)["Ideology"]

n_permutations <- 1000
permuted_coefs <- numeric(n_permutations)

for(i in 1:n_permutations) {
  # Rotate ideologies within each state
  shuffled_data <- panel %>%
    group_by(State) %>%
    mutate(
      order = row_number(), # Preserves original order
      shift = sample(1:n(), 1), # Random shift for each state
      Ideology = Ideology[(order - shift) %% n() + 1] # Apply shift
    ) %>%
    ungroup()
  
  model <- lm(log(EnergyIntensity) ~ Ideology + factor(State) + factor(Year), data=shuffled_data)
  permuted_coefs[i] <- coef(model)["Ideology"]
}


ggplot() + 
  geom_histogram(aes(x = permuted_coefs), fill = "darkgray", color = "white") + 
  geom_vline(aes(xintercept = baseline_coef_Ideology), color = "black") +
  labs(x = "Permuted Coefficients for Ideology", y = "Count",
       title = "Permutation Inference for Energy Intensity ~ Ideology with State/Year FEs",
       subtitle = "Vertical line = real estimate; n = 1,000; coefficients generated by rotating Ideology") + science_theme

p_value <- mean(abs(permuted_coefs) >= abs(baseline_coef_Ideology))
p_value
```

**Regression - Policy Score \~ Ideology with State/Year FEs**

```{r}
m9 <- lm(data = panel,
         Score ~ Ideology + factor(State) + factor(Year))

#summary(m9)
```

```{r}
baseline_all <- lm(data = panel,
         Score ~ Ideology + factor(State) + factor(Year))

baseline_coef_Ideology <- coef(baseline_all)["Ideology"]

n_permutations <- 1000
permuted_coefs <- numeric(n_permutations)

for(i in 1:n_permutations) {
  # Rotate ideologies within each state
  shuffled_data <- panel %>%
    group_by(State) %>%
    mutate(
      order = row_number(), # Preserves original order
      shift = sample(1:n(), 1), # Random shift for each state
      Ideology = Ideology[(order - shift) %% n() + 1] # Apply shift
    ) %>%
    ungroup()
  
  model <- lm(Score ~ Ideology + factor(State) + factor(Year), data=shuffled_data)
  permuted_coefs[i] <- coef(model)["Ideology"]
}

ggplot() + 
  geom_histogram(aes(x = permuted_coefs), fill = "darkgray", color = "white") + 
  geom_vline(aes(xintercept = baseline_coef_Ideology), color = "black") +
  labs(x = "Permuted Coefficients for Ideology", y = "Count",
       title = "Permutation Inference for Stringency of Policy Adoption ~ Ideology",
       subtitle = "Vertical line = real estimate; n = 1,000; coefficients generated by rotating Ideology") + science_theme

p_value <- mean(abs(permuted_coefs) >= abs(baseline_coef_Ideology))
p_value
```

**Regression - Carbon Intensity Policy Score \~ Ideology with State/Year FEs**

```{r}
m10 <- lm(data = panel,
         CI_Score ~ Ideology + factor(State) + factor(Year))

#summary(m10)
```

```{r}
baseline_ci <- lm(data = panel,
         CI_Score ~ Ideology + factor(State) + factor(Year))

baseline_coef_Ideology <- coef(baseline_ci)["Ideology"]

n_permutations <- 1000
permuted_coefs <- numeric(n_permutations)

for(i in 1:n_permutations) {
  # Rotate ideologies within each state
  shuffled_data <- panel %>%
    group_by(State) %>%
    mutate(
      order = row_number(), # Preserves original order
      shift = sample(1:n(), 1), # Random shift for each state
      Ideology = Ideology[(order - shift) %% n() + 1] # Apply shift
    ) %>%
    ungroup()
  
  model <- lm(CI_Score ~ Ideology + factor(State) + factor(Year), data=shuffled_data)
  permuted_coefs[i] <- coef(model)["Ideology"]
}

ggplot() + 
  geom_histogram(aes(x = permuted_coefs), fill = "darkgray", color = "white") + 
  geom_vline(aes(xintercept = baseline_coef_Ideology), color = "black") +
  labs(x = "Permuted Coefficients for Ideology", y = "Count",
       title = "Permutation Inference for Stringency of Carbon Intensity Policy ~ Ideology",
       subtitle = "Vertical line = real estimate; n = 1,000; coefficients generated by rotating Ideology") + science_theme

p_value <- mean(abs(permuted_coefs) >= abs(baseline_coef_Ideology))
p_value
```

**Regression - Energy Intensity Policy Score \~ Ideology with State/Year FEs**

```{r}
m11 <- lm(data = panel,
         EE_Score ~ Ideology + factor(State) + factor(Year))

#summary(m11)
```

```{r}
baseline_EE <- lm(data = panel,
         EE_Score ~ Ideology + factor(State) + factor(Year))

baseline_coef_Ideology <- coef(baseline_EE)["Ideology"]

n_permutations <- 1000
permuted_coefs <- numeric(n_permutations)

for(i in 1:n_permutations) {
  # Rotate ideologies within each state
  shuffled_data <- panel %>%
    group_by(State) %>%
    mutate(
      order = row_number(), # Preserves original order
      shift = sample(1:n(), 1), # Random shift for each state
      Ideology = Ideology[(order - shift) %% n() + 1] # Apply shift
    ) %>%
    ungroup()
  
  model <- lm(EE_Score ~ Ideology + factor(State) + factor(Year), data=shuffled_data)
  permuted_coefs[i] <- coef(model)["Ideology"]
}

ggplot() + 
  geom_histogram(aes(x = permuted_coefs), fill = "darkgray", color = "white") + 
  geom_vline(aes(xintercept = baseline_coef_Ideology), color = "black") +
  labs(x = "Permuted Coefficients for Ideology", y = "Count",
       title = "Permutation Inference for Stringency of Energy Efficiency ~ Ideology",
       subtitle = "Vertical line = real estimate; n = 1,000; coefficients generated by rotating Ideology") + science_theme

p_value <- mean(abs(permuted_coefs) >= abs(baseline_coef_Ideology))
p_value
```

**Regression - Other Policy Score \~ Ideology with State/Year FEs**

```{r}
m12 <- lm(data = panel,
         Other_Score ~ Ideology + factor(State) + factor(Year))

#summary(m12)
```

```{r}
baseline_other <- lm(data = panel,
         Other_Score ~ Ideology + factor(State) + factor(Year))

baseline_coef_Ideology <- coef(baseline_other)["Ideology"]

n_permutations <- 1000
permuted_coefs <- numeric(n_permutations)

for(i in 1:n_permutations) {
  # Rotate ideologies within each state
  shuffled_data <- panel %>%
    group_by(State) %>%
    mutate(
      order = row_number(), # Preserves original order
      shift = sample(1:n(), 1), # Random shift for each state
      Ideology = Ideology[(order - shift) %% n() + 1] # Apply shift
    ) %>%
    ungroup()
  
  model <- lm(Other_Score ~ Ideology + factor(State) + factor(Year), data=shuffled_data)
  permuted_coefs[i] <- coef(model)["Ideology"]
}

ggplot() + 
  geom_histogram(aes(x = permuted_coefs), fill = "darkgray", color = "white") + 
  geom_vline(aes(xintercept = baseline_coef_Ideology), color = "black") +
  labs(x = "Permuted Coefficients for Ideology", y = "Count",
       title = "Permutation Inference for Stringency of Other Policies ~ Ideology",
       subtitle = "Vertical line = real estimate; n = 1,000; coefficients generated by rotating Ideology") + science_theme

p_value <- mean(abs(permuted_coefs) >= abs(baseline_coef_Ideology))
p_value
```

**Figures**

```{r}
figure_data <- panel %>%
  group_by(Year) %>%
  summarise(AvgScore = mean(Score, na.rm = TRUE), AvgCI = mean(CI_Score, na.rm = TRUE),
            AvgEE = mean(EE_Score, na.rm = TRUE), AvgIdeology = mean(Ideology, na.rm=TRUE))

unpivoted_data <- figure_data

figure_data <- pivot_longer(figure_data, 2:5)
colnames(figure_data) <- c("Year", "Score", "Value")

ggplot(data = figure_data %>% filter(Score != "AvgScore") %>% filter(Score != "AvgIdeology"), aes(x = Year, y = Value, shape = Score)) + geom_point() + scale_shape_manual(values=c(1,16)) + theme_update(legend.position = c(0.1,0.8))

ggplot(data = unpivoted_data) + 
  geom_line(aes(x = Year, y = AvgIdeology)) +
  labs(x = "Year", y = "Average Ideology",
       title = "Average Ideology Over Time")

ggplot(data = panel %>% filter(Year >= 2015), aes(x = Ideology, y = x_rps_targets_bindingonly)) +
  geom_point() + geom_smooth(method = lm, se = FALSE) + labs(x="Ideology", y="Percentage", title= "Binding RPS Percentage Targets and Ideology")

ggplot(data = panel %>% filter(Year >= 2015), aes(x = Ideology, y = z_gasoline_tax)) +
  geom_point() + geom_smooth(method = lm, se = FALSE) + labs(x="Ideology", y="Tax",title = "Gasoline Taxes and Ideology")

ggplot(data = panel, aes(x = Ideology, y = x_eers)) +
  geom_point() + geom_smooth(method = lm, se = FALSE) + labs(x="Ideology", y="Percentage",title = "Percentage of Utilities' Needs Procured w/ Efficiency Measures and Ideology")

ggplot(data = panel, aes(x=Ideology, y=Score)) + geom_point() + geom_smooth(method = "lm", se = TRUE) + xlim(c(-1.4,1.2)) + labs(x="Ideology", y="Score",title = "Overall Score and Ideology")

ggplot(data = panel, aes(x=Ideology, y=CI_Score)) + geom_point() + geom_smooth(method = "lm", se = TRUE) + xlim(c(-1.4,1.2)) + ylim(c(0,15))+ labs(x="Ideology", y="Score",title = "Carbon Intensity Score and Ideology")

ggplot(data = panel, aes(x=Ideology, y=EE_Score)) + geom_point() + geom_smooth(method = "lm", se = TRUE) + xlim(c(-1.4,1.2)) + ylim(c(0,15))+ labs(x="Ideology", y="Score",title = "Energy Efficiency Score and Ideology")

ggplot(data = panel, aes(x=CI_Score, y=log(CarbonIntensity))) + geom_point() + geom_smooth(method = "lm", se = TRUE) + labs(x="Carbon Intensity Score", y="Carbon Intensity",title = "Carbon Intensity Score vs. Carbon Intensity")

ggplot(data = panel, aes(x=EE_Score, y=log(EnergyIntensity))) + geom_point() + geom_smooth(method = "lm", se = TRUE)+  labs(x="Energy Efficiency Score", y="Energy Intensity",title = "Energy Efficiency Score vs. Energy Intensity")


print("OLS-FE Figures")

export_summs(m1, m2, m3, m4, model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"), coefs = c("Ideology"), to.file = "docx", error_format = "[{conf.low}, {conf.high}]", robust = "HC3", file.name = "fe_table.docx")

plot_summs(m1,m2,m3,m4,model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"), coefs = "Ideology", plot.distributions = TRUE, point.size = 2, to.file = "pdf", file.name = "fe_plot.pdf")

export_summs(m1, m2, m3, m4, model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"), coefs = c("Ideology"), to.file = "docx", scale = TRUE, error_format = "[{conf.low}, {conf.high}]", robust = "HC3", file.name = "fe_table.docx")

plot_summs(m1,m2,m3,m4,model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"), coefs = "Ideology", plot.distributions = TRUE, scale=TRUE, point.size = 2, to.file = "pdf", file.name = "fe_plot.pdf")

print("MLR Figures")

export_summs(m5,m6,m7,m8, model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"),
             robust = "HC3", to.file = "docx", error_format = "[{conf.low}, {conf.high}]", file.name = "mlr_table.docx")

plot_summs(m5,m6,m7,m8,model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"), plot.distributions = TRUE, point.size = 2, to.file = "pdf", file.name = "mlr_plot.pdf")

export_summs(m5,m6,m7,m8, model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"),
             robust = "HC3", to.file = "docx", scale = TRUE, error_format = "[{conf.low}, {conf.high}]", file.name = "mlr_table.docx")

plot_summs(m5,m6,m7,m8,model.names = c("log(CarbonIntensity)", "log(EnergyIntensity)", "CI subsetted data", "EI subsetted data"), plot.distributions = TRUE, scale=TRUE, point.size = 2, to.file = "pdf", file.name = "mlr_plot.pdf")

print("Policy Adoption Figures")

plot_summs(m9,m10,m11,m12,model.names = c("All Policies", "Carbon Intensity", "Energy Efficiency", "Other"), coefs = "Ideology", plot.distributions = TRUE, point.size = 2, to.file = "pdf", file.name = "policies_plot.pdf")


export_summs(m9,m10,m11,m12,model.names = c("All Policies", "Carbon Intensity", "Energy Efficiency", "Other"), coefs = "Ideology", error_format = "[{conf.low}, {conf.high}]", robust = "HC3", to.file = "pdf", file.name = "policies_table.pdf")

plot_summs(m9,m10,m11,m12,model.names = c("All Policies", "Carbon Intensity", "Energy Efficiency", "Other"), coefs = "Ideology", plot.distributions = TRUE, scale=TRUE, point.size = 2, to.file = "pdf", file.name = "policies_plot.pdf")


export_summs(m9,m10,m11,m12,model.names = c("All Policies", "Carbon Intensity", "Energy Efficiency", "Other"), coefs = "Ideology", error_format = "[{conf.low}, {conf.high}]", robust = "HC3", scale = TRUE, to.file = "pdf", file.name = "policies_table.pdf")

```

\
