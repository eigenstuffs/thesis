---
title: "replication_policy"
author: "Branden Bohrnsen"
date: "7 February 2024"
format: html
editor: visual
---

### Replication File - Data from [Bergquist and Warshaw (2023)](https://www.nature.com/articles/s41467-023-40560-y)

```{r}
options(scipen = 999)
library(tidyverse)
library(fastDummies)
library(zoo)
library(nnet)
library(plm)
library(reshape2)
library(ggpubr)
library(fixest)
set.seed(07151129)
```

Loading data from their replication file

```{r}
panel <- read.csv("panel_data_FEB20.csv")

policies <- read.csv("replication/policies_updated.csv") %>% filter(year >= 1998) %>% filter(abb != "DC") %>% select(-X)
```

Modifying data types and joining to panel

```{r}
names(policies)[1:2] <- c("State", "Year")
```

```{r}
colnames(policies)

policies_temp <- policies %>% select(-x_rps_targets_bindingonly, -z_gasoline_tax, -x_eers)
str(policies_temp)

colnames(policies_temp) <- 
  dplyr::recode(colnames(policies_temp),
                            "abb" = "State", "year" = "Year",
                            "climate_action_plan_21" = "ClimateActionPlan",
                            "netmeter_yearadopted_21" = "NetMeter",
                            "pace_21" = "PACE",
                            "w_ee_21" = "EfficiencyTargets",
                            "w_environment_solar_taxcredit_21" = "ResSolarTaxCredit",
                            "w_low_income_ee_21" = "LowIncomeEff",
                            "public_building_standards" = "PublicBuildingStandards",
                            "w4_electric_decoupling_21" = "ElectricDecoupling",
                            "w4_gas_decoupling_21" = "GasDecoupling",
                         "w_gg_rr_21" = "PowerPlantsReport",
                         "environment_ca_car_emissions_standards_21" = "CACarStandards",
                         "environment_preemption_naturalgasbans" = "BanGasHookupBans",
                         "w4_environment_state_rps_21" = "RPS",
                         "w_ghg_targets_21" = "GHGTargets",
                         "community_solar" = "CommunitySolar",
                         "environment_ghg_cap_21" = "UtilitiesGHGCap",
                         "environment_publicbenefit_funds_21" = "PublicBenefitFunds",
                         "fgd_21" = "FuelSourceDisclosure",
                         "ghg_standards_21" = "PerformanceStds",
                         "w_complete_streets_21" = "CompleteStreets",
                         "w_environment_state_nepas_21" = "StateNEPA",
                         "w_mgpo_21" = "RenewablesOffered")

carbon_intensity_policies <- c("CommunitySolar", "FuelSourceDisclosure", "NetMeter","RenewablesOffered", "RPS", "PowerPlantsReport", "ResSolarTaxCredit", "UtilitiesGHGCap", "GHGTargets", "BanGasHookupBans", "PerformanceStds")

energy_intensity_policies <- c("PublicBuildingStandards", "CompleteStreets", "EfficiencyTargets", "LowIncomeEff", "ElectricDecoupling", "GasDecoupling")

other_policies <- c("ClimateActionPlan", "PublicBenefitFunds", "PACE", "StateNEPA", "CACarStandards", "GHGTargets")

dg_policies <- c("ResSolarTaxCredit", "NetMeter", "CommunitySolar")

names(policies_temp) %in% c(carbon_intensity_policies, energy_intensity_policies, other_policies)

count <- policies_temp %>%
  mutate(sum = rowSums(across(c(-State, -Year)), na.rm = TRUE))

count <- count %>% select(State, Year, sum)
colnames(count)[3] <- "Score"

count <- merge(count, policies %>% select(State, Year, x_rps_targets_bindingonly, z_gasoline_tax, x_eers), by = c("State", "Year"))
count <- merge(count, panel, c("State", "Year"))

## carbon intensity

CI_pol <- policies_temp %>% select(State, Year, all_of(carbon_intensity_policies)) %>%
  mutate(CI_Score = rowSums(across(c(-State, -Year)), na.rm = TRUE))

CI_pol <- CI_pol %>% select(State, Year, CI_Score)

## energy intensity

EI_pol <- policies_temp %>% select(State, Year, all_of(energy_intensity_policies)) %>%
  mutate(EE_Score = rowSums(across(c(-State, -Year)), na.rm = TRUE))

EI_pol <- EI_pol %>% select(State, Year, EE_Score)

### other policies

other_pol <- policies_temp %>% select(State, Year, all_of(other_policies)) %>%
  mutate(Other_Score = rowSums(across(c(-State, -Year)), na.rm = TRUE))

other_pol <- other_pol %>% select(State, Year, Other_Score)

### dg policies

dg_pol <- policies_temp %>% select(State, Year, all_of(dg_policies)) %>%
  mutate(DG_Score = rowSums(across(c(-State, -Year)), na.rm = TRUE))

dg_pol <- dg_pol %>% select(State, Year, DG_Score)

###

count <- merge(count, CI_pol, by = c("State", "Year"))
count <- merge(count, EI_pol, by = c("State", "Year"))
count <- merge(count, other_pol, by = c("State", "Year"))
count <- merge(count, dg_pol, by = c("State", "Year"))

###

write.csv(count, "panel_with_count_FEB20.csv", row.names = FALSE)
```

```{r}
policies_subset <- policies %>% filter(year >= 2005) %>% filter(year <= 2010)

policies_subset <- data.frame(lapply(policies_subset, function(x) na.locf(x, na.rm = FALSE)))

policies_subset <- data.frame(lapply(policies_subset, function(x) {
  rev(na.locf(rev(x), na.rm = FALSE))
}))

policies_subset <- policies_subset %>% dplyr::select(-environment_preemption_naturalgasbans, -w_low_income_ee_21)

for (col in names(policies_subset %>% dplyr::select(-year, -abb))) {
  formula <- as.formula(paste(as.factor(col), "~ year"))
  model <- lm(formula, data = policies_subset)
  if (summary(model)$coefficients['year', 'Pr(>|t|)'] < 0.01) {
    print("SIGNIFICANT:")
    print(formula)
    print(summary(model)$coefficients['year', 'Pr(>|t|)'])
  } #else {
    #print("NOT SIGNIFICANT:")
    #print(formula)
    #print(summary(model)$coefficients['year', 'Pr(>|t|)'])
  #}
}
```

```{r}
policies_dupe <- policies_temp

policies_dupe <- policies_dupe %>% arrange(State, Year)

policies_dupe <- policies_dupe %>%
  group_by(State) %>%
  mutate(across(where(is.numeric), ~na.locf(.x, na.rm = FALSE))) %>% # LOCF
  mutate(across(where(is.numeric), ~na.locf(.x, fromLast = TRUE, na.rm = FALSE))) %>% # NOCB
  ungroup()

policies_dupe[,3:24] <- lapply(policies_dupe[,3:24], as.factor)

policies_onehot <- dummy_cols(policies_dupe %>% dplyr::select(-State, -Year), remove_selected_columns = TRUE, remove_first_dummy = TRUE)

policies_dupe <- cbind(policies_dupe$State, policies_dupe$Year, policies_onehot)

colnames(policies_dupe)[1:2] <- c("State", "Year")

policies_dupe <- left_join(panel %>% dplyr::select(State, Year, Ideology), policies_dupe, by = c("State", "Year"))

policies_dupe <- policies_dupe %>% select(-ends_with("_NA"))

df <- data.frame(
  policy = rep("", 36),
  pseudor2 = rep(0, 36),
  odds_ratio = rep(0,36)
)

str(df)

for (i in 4:length(names(policies_dupe))) {
  lhs <- names(policies_dupe)[i]
  model <- feglm(as.formula(paste(lhs, "~ Ideology")),
              panel.id = ~ State + Year,
              family = "binomial",
              vcov = "driscoll_kraay",
              data = policies_dupe)
  df$policy[i-3] <- lhs
  df$pseudor2[i-3] <- as.numeric(unlist(fitstat(model, ~ pr2)))
  df$odds_ratio[i-3] <- exp(coef(model)[2])
}

ggplot(df, aes(x = reorder(policy, pseudor2), y = pseudor2)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  xlab("Policy") + 
  ylab("Pseudo RÂ²") +
  ggtitle("Predictive Power of Ideology by Policy") + theme_pubr() +
  theme(axis.text.y = element_text(size = 8))

df$positive <- ifelse(df$odds_ratio > 1, "yes", "no")

ggplot(df, aes(x = reorder(policy, odds_ratio), y = odds_ratio, fill = positive)) +
  geom_bar(stat = "identity") +
  coord_flip() + geom_hline(aes(yintercept = 1), linetype = "dashed") +
  labs(x = "", y = "Odds Ratio", fill = "More likely when ideology shifts right?",
       caption = "* Dashed line represents odds ratio at 0, when ideology has no effect")
  ggtitle("Predictive Power of Ideology by Policy") + theme_pubr() +
  theme(axis.text.y = element_text(size = 8))
  
ggsave("exploratory/policy_odds.png")

xtable(df)
```

```{r}
policies_melt <- melt(policies_temp, c("State", "Year"))

policies_melt <- policies_melt %>%
  group_by(variable) %>%
  summarise(sum_value = sum(value, na.rm = TRUE))

policies_melt <- policies_melt %>%
  mutate(variable = factor(variable, levels = variable[order(sum_value)]))

ggplot(policies_melt) + geom_bar(aes(x = variable, sum_value), stat = "identity") +
  labs(x = "", y = "Frequency") + coord_flip() + theme_pubr()

ggsave("exploratory/policy_count.png", height = 5)
```

```{r}

```
