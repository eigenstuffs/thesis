---
title: "results_export"
format: html
editor: visual
---

**Packages and Data**

```{r}
library(jtools)
library(car)
library(plm)
library(tidyverse)
library(nnet)
library(cluster)
library(ConvergenceClubs)
set.seed(07151129)
options(scipen = 999)

panel <- read.csv("p_JAN29.csv")[,2:29] # exlcuding ID column
policies <- read.csv("policies.csv")[,3:29] %>% filter(year >= 1998) # Bergquist & Warshaw 2023
```

**Exploratory Data Analysis**

```{r}
ggplot(panel, aes(x=AdjMeanChamber, y=CI, color=Year)) + geom_point()
ggplot(panel, aes(x=AdjMeanChamber, y=EI, color=Year)) + geom_point()
ggplot(panel, aes(x=PropRenewableConsumption, y=CI, color=Year)) + geom_point()
ggplot(panel, aes(x=IncomePerCapita, y=EI, color=Year)) + geom_point()

summary(lm(EI~AdjMeanChamber, data=panel))
```

**Fixed Effects Models**

```{r}
m1 <- glm(log(CI) ~ AdjMeanChamber + factor(State) + factor(Year), data = panel)
m2 <- glm(log(EI) ~ AdjMeanChamber + factor(State) + factor(Year), data = panel)

summary(m1)
summary(m2)
  
plot(m1)
```

**First Models with Features**

```{r}
colnames(panel)
m3 <- glm(log(CI) ~ AdjMeanChamber + AdjPercentUnion + Population + IncomePerCapita + PropFarmWages + PropOilProduction + PropCoalProduction + PropNatGasProduction + Weighted_GHI + Weighted_Speed120m, data = panel)
m4 <- glm(log(EI) ~ AdjMeanChamber + AdjPercentUnion + Population + IncomePerCapita + PropFarmWages + PropOilProduction + PropCoalProduction + PropNatGasProduction + Weighted_GHI + Weighted_Speed120m, data = panel)

hist(log(panel$CI))
hist(log(panel$EI))
hist(log(panel$AdjMeanChamber))


summary(m3)
summary(m4)

confint(m3)
confint(m4)
```

**Visualizations**

```{r}
ggplot(panel, aes(x=Year, y=Emissions, color=State)) +
  geom_line()
ggplot(panel, aes(x=Year, y=CI, color=State)) +
  geom_line()
ggplot(panel, aes(x=Year, y=EI, color=State)) +
  geom_line()
ggplot(panel, aes(x=Year, y=Chamber, color=State)) +
  geom_line()

panel_left <- panel[panel$Chamber <= 10.067,]
panel_right <- panel[panel$Chamber > 10.067,]
```

**Permutation Inference - Overall Emissions**

```{r}
baseline_E_FE <- lm(Emissions ~ AdjMeanChamber + factor(State) + factor(Year), data = panel)
baseline_E_FE_R2 <- summary(baseline_E_FE)$r.squared

n_permutations <- 1000
permuted_stats <- numeric(n_permutations)

for(i in 1:n_permutations) {
  shuffled_data <- panel
  shuffled_data$AdjMeanChamber <- sample(shuffled_data$AdjMeanChamber)
  model <- lm(Emissions ~ AdjMeanChamber + factor(State) + factor(Year), data=shuffled_data)
  permuted_stats[i] <- summary(model)$r.squared
}

p_value <- mean(permuted_stats >= baseline_E_FE_R2)
p_value
```

**Permutation Inference - Carbon Intensity**

```{r}
baseline_CI_FE <- lm(CI ~ AdjMeanChamber + factor(State) + factor(Year), data = panel)
baseline_CI_FE_R2 <- summary(baseline_CI_FE)$r.squared

n_permutations <- 1000
permuted_stats <- numeric(n_permutations)

for(i in 1:n_permutations) {
  shuffled_data <- panel
  shuffled_data$AdjMeanChamber <- sample(shuffled_data$AdjMeanChamber)
  model <- lm(CI ~ AdjMeanChamber + factor(State) + factor(Year), data=shuffled_data)
  permuted_stats[i] <- summary(model)$r.squared
}

p_value <- mean(permuted_stats >= baseline_CI_FE_R2)
p_value
```

**Permutation Inference - Energy Intensity**

```{r}
baseline_EI_FE <- lm(EI ~ AdjMeanChamber + factor(State) + factor(Year), data = panel)
baseline_EI_FE_R2 <- summary(baseline_EI_FE)$r.squared

n_permutations <- 1000
permuted_stats <- numeric(n_permutations)

for(i in 1:n_permutations) {
  shuffled_data <- panel
  shuffled_data$AdjMeanChamber <- sample(shuffled_data$AdjMeanChamber)
  model <- lm(EI ~ AdjMeanChamber + factor(State) + factor(Year), data=shuffled_data)
  permuted_stats[i] <- summary(model)$r.squared
}

p_value <- mean(permuted_stats >= baseline_EI_FE_R2)
p_value
```

**Climate Policy Stringency Index (Bergquist & Warshaw 2023)**

```{r}
names(policies)[1:2] <- c("State", "Year")
policies <- policies %>% filter(State != "DC")
for (i in 3:24) {
  policies[,i] <- as.factor(policies[,i])
}
policies <- full_join(policies, panel %>% select(State, Year, AdjMeanChamber, CI, EI))

ggplot(policies, aes(x=Year, y=z_gasoline_tax, color=State)) +
  geom_line() + theme_bw() + labs(title = "Gasoline Taxes Over Time (1998-2020)") + theme(
    title = element_text(face = "bold", color = "black"),
    axis.title = element_text(face = "bold", color = "black"),
    panel.grid.major.x = element_blank()
  )

carbon_intensity_policies <- c("community_solar", "environment_ghg_cap_21", "fgd_21", "netmeter_yearadopted_21", "w_environment_solar_taxcredit_21", "w_gg_rr_21", "w_mgpo_21", "w4_environment_state_rps_21", "x_rps_targets_bindingonly")

energy_intensity_policies <- c("environment_ca_car_emissions_standards_21", "environment_preemption_naturalgasbans", "public_building_standards", "w_complete_streets_21", "w_ee_21", "w_low_income_ee_21", "w4_electric_decoupling_21", "w4_gas_decoupling_21", "x_eers")

both_policies <- c("climate_action_plan_21", "environment_publicbenefit_funds_21", "ghg_standards_21", "pace_21", "w_environment_state_nepas_21", "w_ghg_targets_21", "z_gasoline_tax")

ci_policies <- policies %>% select(State, Year, all_of(carbon_intensity_policies))
ei_policies <- policies %>% select(State, Year, all_of(energy_intensity_policies))
gen_policies <- policies %>% select(State, Year, all_of(both_policies))

for (i in names(ei_policies)) {
  if (i != "Year" & i != "State") {
    print(ggplot(ei_policies, aes(x=Year, y=get(i), color=State)) +
      geom_jitter() + theme_bw() + labs(title = i) + theme(
        title = element_text(face = "bold", color = "black"),
        axis.title = element_text(face = "bold", color = "black"),
        panel.grid.major.x = element_blank())
  )}
}

for (i in names(ci_policies)) {
  if (i != "Year" & i != "State") {
    print(ggplot(ci_policies, aes(x=Year, y=get(i), color=State)) +
      geom_jitter() + theme_bw() + labs(title = i) + theme(
        title = element_text(face = "bold", color = "black"),
        axis.title = element_text(face = "bold", color = "black"),
        panel.grid.major.x = element_blank())
  )}
}

for (i in names(gen_policies)) {
  if (i != "Year" & i != "State") {
    print(ggplot(gen_policies, aes(x=Year, y=get(i), color=State)) +
      geom_line() + theme_bw() + labs(title = i) + theme(
        title = element_text(face = "bold", color = "black"),
        axis.title = element_text(face = "bold", color = "black"),
        panel.grid.major.x = element_blank())
  )}
}

multinom_label <- c(rep(NA,24))
multinom_coef <- c(rep(NA,24))
multinom_std <- c(rep(NA,24))
multinom_p <- c(rep(NA,24))
multinom_coef_2 <- c(rep(NA,24))
multinom_std_2 <- c(rep(NA,24))
multinom_p_2 <- c(rep(NA,24))
multinom_coef_3 <- c(rep(NA,24))
multinom_std_3 <- c(rep(NA,24))
multinom_p_3 <- c(rep(NA,24))
multinom_coef_4 <- c(rep(NA,24))
multinom_std_4 <- c(rep(NA,24))
multinom_p_4 <- c(rep(NA,24))
multinom_coef_5 <- c(rep(NA,24))
multinom_std_5 <- c(rep(NA,24))
multinom_p_5 <- c(rep(NA,24))

for (i in 3:24) {
  if (is.factor(policies[,i])) {
    m <- multinom(policies[,i] ~ AdjMeanChamber + factor(State) + factor(Year), data = policies)
    sm <- summary(m)
    
    for (k in 1:length(levels(policies[,i]))) {
      if (length(levels(policies[,i])) > 2) {
        coef_i <- as.numeric(sm$coefficients[,2][k])
        std_i <- as.numeric(sm$standard.errors[,2][k])
        z <- coef_i/std_i
        p_i <- as.numeric(sub(".* ([^ ]+)$", "\\1", (1 - pnorm(abs(z), 0, 1)) * 2))
        if (k == 1) {
          multinom_coef[i] <- coef_i
          multinom_std[i] <- std_i
          multinom_p[i] <- p_i
        } else if (k == 2) {
          multinom_coef_2[i] <- coef_i
          multinom_std_2[i] <- std_i
          multinom_p_2[i] <- p_i
        } else if (k == 3) {
          multinom_coef_3[i] <- coef_i
          multinom_std_3[i] <- std_i
          multinom_p_3[i] <- p_i
        } else if (k == 4) {
          multinom_coef_4[i] <- coef_i
          multinom_std_4[i] <- std_i
          multinom_p_4[i] <- p_i
        }
      } else {
        coef_i <- as.numeric(sm$coefficients[2])
        std_i <- as.numeric(sm$standard.errors[2])
        z <- coef_i/std_i
        p_i <- as.numeric(sub(".* ([^ ]+)$", "\\1", (1 - pnorm(abs(z), 0, 1)) * 2))
        multinom_coef[i] <- coef_i
        multinom_std[i] <- std_i
        multinom_p[i] <- p_i
      }
    }
    multinom_label[i] <- colnames(policies)[i]
  }
}

multinom_outcomes <- data.frame(multinom_label, multinom_coef, multinom_std, multinom_p,
multinom_coef_2, multinom_std_2, multinom_p_2,      multinom_coef_3, multinom_std_3, multinom_p_3)
multinom_outcomes
multinom_sig <- multinom_outcomes %>% filter(multinom_p < 0.05 | multinom_p_2 < 0.05 | multinom_p_3 < 0.05)

policies_sig <- policies %>% select(Year, State, AdjMeanChamber, CI, EI, environment_ca_car_emissions_standards_21
, environment_ghg_cap_21, 
environment_publicbenefit_funds_21, 	
netmeter_yearadopted_21, w_ghg_targets_21,w4_environment_state_rps_21,	
w4_gas_decoupling_21)

policy_descriptions <- c(rep(NA, length(policies_sig)))
policy_descriptions <- c("Year",
                         "State",
                         "Chamber",
                         "CI",
                         "EI",
                         "Adoption of CA standards which are stricter than federal level (yes/no)",
                         "Binding cap on GHG from the utility sector (yes/no)",
                         "Public benefit fund for renewables/energy efficiency (yes/no)",
                         "On-site renewable generation? (yes or comparable/no)",
                         "Emission reduction levels by time (0: none/1: executive order/2: statutory or \npublic utility commission order)",
                         "Renewable Portfolio Standards (0: no/1: voluntary or <1%/2: mandatory less \nthan 100%/3: mandatory 100%)",
                         "Compensation for less gas sold by utilities (0: none/1: performance-based/2: \nnon-decoupling eff. adjustment/3: decoupled)")

for (i in 1:ncol(policies)) {
  if (is.factor(policies[,i])) {
    policies_temp <- policies %>% select(State, Year, AdjMeanChamber) %>% mutate(Variable = policies[,i])
    policies_temp <- na.omit(policies_temp)
    suppressWarnings(print(ggplot(policies_temp, aes(x=AdjMeanChamber, y=Variable, color=Year)) +
      geom_jitter() + theme_bw() + labs(title = colnames(policies)[i]) + theme(
        title = element_text(face = "bold", color = "black"),
        axis.title = element_text(face = "bold", color = "black"),
        panel.grid.major.x = element_blank()) + geom_vline(xintercept = median(policies_temp$AdjMeanChamber, na.rm = TRUE), linetype = "dashed", color = "blue") + xlim(c(min(policies_temp$AdjMeanChamber, na.rm = TRUE), max(policies_temp$AdjMeanChamber, na.rm = TRUE))))
  )}
}

for (i in 1:ncol(policies)) {
  if (is.factor(policies[,i])) {
    policies_temp <- policies %>% select(State, Year, AdjMeanChamber) %>% mutate(Variable = policies[,i]) %>% filter(Year >= 2005 & Year <= 2008)
    policies_temp <- na.omit(policies_temp)
    suppressWarnings(print(ggplot(policies_temp, aes(x=AdjMeanChamber, y=Variable, color=Year)) +
      geom_jitter() + scale_color_gradient(low = "pink", high = "red")  + theme_bw() + labs(title = colnames(policies)[i]) + theme(
        title = element_text(face = "bold", color = "black"),
        axis.title = element_text(face = "bold", color = "black"),
        panel.grid.major.x = element_blank()) + geom_vline(xintercept = median(policies_temp$AdjMeanChamber, na.rm = TRUE), linetype = "dashed", color = "black") + xlim(c(min(policies_temp$AdjMeanChamber, na.rm = TRUE), max(policies_temp$AdjMeanChamber, na.rm = TRUE))))
  )}
}

for (i in 1:ncol(policies_sig)) {
  if (is.factor(policies_sig[,i])) {
    policies_temp <- policies_sig %>% select(State, Year, AdjMeanChamber) %>% mutate(Variable = policies_sig[,i])
    policies_temp <- na.omit(policies_temp)
    suppressWarnings(print(ggplot(policies_temp, aes(x=AdjMeanChamber, y=Variable, color=Year)) +
      geom_jitter() + scale_color_gradient(low = "gold", high = "darkgreen") + theme_bw() + labs(title = colnames(policies_sig)[i], subtitle = policy_descriptions[i]) + theme(
        title = element_text(face = "bold", color = "black"),
        axis.title = element_text(face = "bold", color = "black"),
        panel.grid.major.x = element_blank()) + geom_vline(xintercept = median(policies_temp$AdjMeanChamber, na.rm = TRUE), linetype = "dashed", color = "black") + xlim(c(min(policies_temp$AdjMeanChamber, na.rm = TRUE), max(policies_temp$AdjMeanChamber, na.rm = TRUE))))
  )}
}

for (i in 1:ncol(policies_sig)) {
  if (is.factor(policies_sig[,i])) {
    policies_temp <- policies_sig %>% select(State, Year, AdjMeanChamber, CI, EI) %>% mutate(Variable = policies_sig[,i])
    policies_temp <- na.omit(policies_temp)
    print(ggplot(policies_temp, aes(x=Variable, y=CI, color=AdjMeanChamber)) +
      geom_jitter() + scale_color_gradient(low = "gold", high = "darkgreen") + theme_bw() + labs(title = colnames(policies_sig)[i], subtitle = policy_descriptions[i]))
    print(ggplot(policies_temp, aes(x=Variable, y=EI, color=AdjMeanChamber)) +
      geom_jitter() + scale_color_gradient(low = "purple", high = "orange") + theme_bw() + labs(title = colnames(policies_sig)[i], subtitle = policy_descriptions[i]))
  }
}
```

**Multinomial Logistic Regression w/ Log Chamber**

```{r}
log_multinom_label <- c(rep(NA,24))
log_multinom_coef <- c(rep(NA,24))
log_multinom_std <- c(rep(NA,24))
log_multinom_p <- c(rep(NA,24))
log_multinom_coef_2 <- c(rep(NA,24))
log_multinom_std_2 <- c(rep(NA,24))
log_multinom_p_2 <- c(rep(NA,24))
log_multinom_coef_3 <- c(rep(NA,24))
log_multinom_std_3 <- c(rep(NA,24))
log_multinom_p_3 <- c(rep(NA,24))
log_multinom_coef_4 <- c(rep(NA,24))
log_multinom_std_4 <- c(rep(NA,24))
log_multinom_p_4 <- c(rep(NA,24))
log_multinom_coef_5 <- c(rep(NA,24))
log_multinom_std_5 <- c(rep(NA,24))
log_multinom_p_5 <- c(rep(NA,24))

for (i in 3:24) {
  if (is.factor(policies[,i])) {
    m <- multinom(policies[,i] ~ log(Chamber) + factor(State) + factor(Year), data = policies)
    sm <- summary(m)
    
    for (k in 1:length(levels(policies[,i]))) {
      if (length(levels(policies[,i])) > 2) {
        coef_i <- as.numeric(sm$coefficients[,2][k])
        std_i <- as.numeric(sm$standard.errors[,2][k])
        z <- coef_i/std_i
        p_i <- as.numeric(sub(".* ([^ ]+)$", "\\1", (1 - pnorm(abs(z), 0, 1)) * 2))
        if (k == 1) {
          log_multinom_coef[i] <- coef_i
          log_multinom_std[i] <- std_i
          log_multinom_p[i] <- p_i
        } else if (k == 2) {
          log_multinom_coef_2[i] <- coef_i
          log_multinom_std_2[i] <- std_i
          log_multinom_p_2[i] <- p_i
        } else if (k == 3) {
          log_multinom_coef_3[i] <- coef_i
          log_multinom_std_3[i] <- std_i
          log_multinom_p_3[i] <- p_i
        } else if (k == 4) {
          log_multinom_coef_4[i] <- coef_i
          log_multinom_std_4[i] <- std_i
          log_multinom_p_4[i] <- p_i
        }
      } else {
        coef_i <- as.numeric(sm$coefficients[2])
        std_i <- as.numeric(sm$standard.errors[2])
        z <- coef_i/std_i
        p_i <- as.numeric(sub(".* ([^ ]+)$", "\\1", (1 - pnorm(abs(z), 0, 1)) * 2))
        log_multinom_coef[i] <- coef_i
        log_multinom_std[i] <- std_i
        log_multinom_p[i] <- p_i
      }
    }
    log_multinom_label[i] <- colnames(policies)[i]
  }
}

log_multinom_outcomes <- data.frame(log_multinom_label, log_multinom_coef, log_multinom_std, log_multinom_p,
log_multinom_coef_2, log_multinom_std_2, log_multinom_p_2,      log_multinom_coef_3, log_multinom_std_3, log_multinom_p_3)
log_multinom_outcomes
log_multinom_sig <- log_multinom_outcomes %>% filter(log_multinom_p < 0.05 | log_multinom_p_2 < 0.05 | log_multinom_p_3 < 0.05)

unique(log_multinom_sig$log_multinom_label)

m1 <- lm(log(CI)~ factor(environment_ca_car_emissions_standards_21) + factor(environment_ghg_cap_21) + factor(netmeter_yearadopted_21) + factor(pace_21) + factor(w_environment_solar_taxcredit_21) + factor(w_ghg_targets_21) + factor(w4_environment_state_rps_21) + factor(w4_gas_decoupling_21) , data = policies)

m2 <- lm(log(EI) ~ factor(environment_ca_car_emissions_standards_21) + factor(environment_ghg_cap_21) + factor(netmeter_yearadopted_21) + factor(pace_21) + factor(w_environment_solar_taxcredit_21) + factor(w_ghg_targets_21) + factor(w4_environment_state_rps_21) + factor(w4_gas_decoupling_21) , data = policies)

export_summs(m1, m2, model.names = c("CI", "EI"))
plot(m1)
plot_summs(m1, m2, model.names = c("CI", "EI"))
vif(m1)
vif(m2)

models_ci <- c()
models_ei <- c()

for (i in 3:27) {
  if (colnames(policies)[i] != "environment_preemption_naturalgasbans") {
    model_ci <- lm(CI ~ factor(policies[,i]) + factor(State) + factor(Year), data = policies)
    model_ei <- lm(EI ~ factor(policies[,i])+ factor(State) + factor(Year), data = policies)
    ci <- summary(model_ci)
    ei <- summary(model_ei)
    print(colnames(policies)[i])
    cat(ci$coefficients[2,])
    print(summary(model_ci))
    print(summary(model_ei))
    models_ci <- rbind(models_ci, ci$coefficients[2,])
    models_ei <- rbind(models_ei, ei$coefficients[2,])
  }
}

models_ci <- cbind(names(policies)[c(3:6,8:27)], models_ci)
models_ei <- cbind(names(policies)[c(3:6,8:27)], models_ei)

m_test <- lm(CI ~ x_eers + factor(State) + factor(Year), data = policies)
sm_test <- summary(m_test)
sm_test$coefficients[2,]
```

```{r}
library(fastDummies)

policies_omit <- policies
policies_omit[is.na(policies_omit)] <- 0
policies_omit <- policies_omit %>% filter(State != 0) %>% filter(State != "DC")
policies_omit[3:24] <- lapply(policies_omit[3:24], as.factor)
names(policies_omit)[3:24] <- paste0("FACTOR_", names(policies_omit)[3:24])


cols_to_encode <- sapply(policies_omit, function(x) is.factor(x) && length(unique(x)) > 2)
factor_cols <- names(policies_omit)[cols_to_encode]

policies_onehot <- dummy_cols(policies_omit, select_columns = factor_cols, remove_first_dummy = TRUE)

policies_onehot <- policies_onehot %>% select(-factor_cols)

str(policies_onehot)
policies_onehot[3:24] <- lapply(policies_onehot[3:13], as.numeric)
policies_onehot[3:24] <- policies_onehot[3:13]-1

long_policies <- policies_onehot %>%
  pivot_longer(
    cols = starts_with("FACTOR"),
    names_to = "policy",
    values_to = "adopted"
  ) %>%
  filter(adopted == 1) 

first_year_adopted <- long_policies %>%
  group_by(State, policy) %>%
  summarize(first_year = min(Year)) %>%
  ungroup()

unique(policies_omit$State)

str(first_year_adopted)

first_year_adopted$State <- as.factor(first_year_adopted$State)
first_year_adopted$policy <- as.factor(first_year_adopted$policy)
colnames(first_year_adopted) <- c("State", "Policy", "Year")

joined_first_year <- left_join(first_year_adopted, panel %>% select(State, Year, AdjMeanChamber), by=c("State","Year"))

str(joined_first_year)
joined_first_year$State <- as.factor(joined_first_year$State)

for (i in 1:length(unique(joined_first_year$Policy))) {
  print(
    ggplot(data=joined_first_year%>%filter(Policy==unique(joined_first_year$Policy)[i]),
           aes(x=Year, y=AdjMeanChamber,color=State)) + geom_point() + theme_bw() + labs(title = as.character(unique(joined_first_year$Policy)[i])) + xlim(c(1998,2020)) + ylim(c(-2,2))
  )
}

write.csv(joined_first_year, "first_year_adopted.csv")
```

```{r}
joined_first_year$Year <- 2024 - joined_first_year$Year
colnames(joined_first_year)[3] <- "YearsSinceAdoption"

years_since_EI <- joined_first_year %>% filter(Policy %in% energy_intensity_policies)

joined_first_year$Policy <- gsub("FACTOR_", "", joined_first_year$Policy)

carbon_intensity_policies <- c("community_solar", "environment_ghg_cap_21", "fgd_21", "netmeter_yearadopted_21", "w_environment_solar_taxcredit_21_2","w_mgpo_21_1", "w_gg_rr_21", "w_mgpo_21", "w4_environment_state_rps_21_1", "x_rps_targets_bindingonly", "w_gg_rr_21_1", "w4_environment_state_rps_21_2", "w4_environment_state_rps_21_3", "w_environment_solar_taxcredit_21_1", "w_mgpo_21_2", "w_gg_rr_21_2")

energy_intensity_policies <- c("environment_ca_car_emissions_standards_21", "environment_preemption_naturalgasbans", "public_building_standards", "w_complete_streets_21", "w_ee_21", "w_low_income_ee_21", "w4_electric_decoupling_21", "w4_gas_decoupling_21", "x_eers","w4_electric_decoupling_21_3", "w4_electric_decoupling_21_1", "w4_gas_decoupling_21_3", "w4_gas_decoupling_21_2", "w_low_income_ee_21_2", "w4_electric_decoupling_21_2", "w4_gas_decoupling_21_1", "w_low_income_ee_21_1", "w_complete_streets_21_2", "w_complete_streets_21_1", "w_ee_21_1", "w_ee_21_2")

both_policies <- c("climate_action_plan_21", "environment_publicbenefit_funds_21", "ghg_standards_21", "pace_21", "w_environment_state_nepas_21_1", "w_ghg_targets_21", "z_gasoline_tax", "w_environment_state_nepas_21_2", "w_ghg_targets_21_1", "w_ghg_targets_21_2")

joined_CI <- joined_first_year %>% filter(Policy %in% carbon_intensity_policies)
joined_EI <- joined_first_year %>% filter(Policy %in% energy_intensity_policies)
joined_both <- joined_first_year %>% filter(Policy %in% both_policies)

summary(
  lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_first_year)
)

summary(
  lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_CI)
)

summary(
  lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_EI)
)

summary(
  lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_both)
)
```

**Permutation Inference - Policy Adoption - All Policies**

```{r}
baseline_ALL <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_first_year)
baseline_ALL_R2 <- summary(baseline_ALL)$r.squared

n_permutations <- 1000
permuted_stats <- numeric(n_permutations)

for(i in 1:n_permutations) {
  shuffled_data <- joined_first_year
  shuffled_data$AdjMeanChamber <- sample(joined_first_year$AdjMeanChamber)
  model <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = shuffled_data)
  permuted_stats[i] <- summary(model)$r.squared
}

p_value <- mean(permuted_stats >= baseline_ALL_R2)
p_value
```

**Permutation Inference - Policy Adoption - Energy Efficiency Policies**

```{r}
baseline_EE <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_EI)
baseline_EE_R2 <- summary(baseline_EE)$r.squared

n_permutations <- 1000
permuted_stats <- numeric(n_permutations)

for(i in 1:n_permutations) {
  shuffled_data <- joined_EI
  shuffled_data$AdjMeanChamber <- sample(joined_EI$AdjMeanChamber)
  model <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = shuffled_data)
  permuted_stats[i] <- summary(model)$r.squared
}

p_value <- mean(permuted_stats >= baseline_ALL_R2)
p_value
```

**Permutation Inference - Policy Adoption - Carbon Intensity Policies**

```{r}
baseline_CI <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_CI)
baseline_CI_R2 <- summary(baseline_CI)$r.squared

n_permutations <- 1000
permuted_stats <- numeric(n_permutations)

for(i in 1:n_permutations) {
  shuffled_data <- joined_CI
  shuffled_data$AdjMeanChamber <- sample(joined_CI$AdjMeanChamber)
  model <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = shuffled_data)
  permuted_stats[i] <- summary(model)$r.squared
}

p_value <- mean(permuted_stats >= baseline_CI_R2)
p_value
```

**Permutation Inference - Policy Adoption - Other Policies**

```{r}
baseline_other <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = joined_both)
baseline_other_R2 <- summary(baseline_other)$r.squared

n_permutations <- 1000
permuted_stats <- numeric(n_permutations)

for(i in 1:n_permutations) {
  shuffled_data <- joined_both
  shuffled_data$AdjMeanChamber <- sample(joined_both$AdjMeanChamber)
  model <- lm(YearsSinceAdoption ~ AdjMeanChamber, data = shuffled_data)
  permuted_stats[i] <- summary(model)$r.squared
}

p_value <- mean(permuted_stats >= baseline_other_R2)
p_value
```
